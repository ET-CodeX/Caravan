//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES

//=====================================================================================================================

#define WEATHERFC_DEF_URL_P1  "http://api.openweathermap.org/data/2.5/forecast?"   // URL Default part 1
#define WEATHERFC_DEF_URL_EXT "&units=metric&mode=xml"                             // URL Default extensions


#define WEATHERFC_XmlFile     "WeatherForecast.xml"   // Name of the XML-file

#define WEATHERFC_XmlEntries  40                      // Number of entries in the weather-xml (5 days * 8 entries/day)


#define NEW_DATA_IN_PROCESS    99                     // staus "new data will be processed"
#define HTTP_REQUEST_OK       200                     // http return code "everything ok"

//=====================================================================================================================
//}}LSL_DEFINES

//{{LSL_DECLARATION
#include <.\lsl_st_httpclient.h>

(*!
<Class
	Name               = "_WeatherForecast"
	Revision           = "1.1"
	GUID               = "{F46C734F-FB64-4FDB-9C50-5985DD84D5CD}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(644,120)"
	Comment            = "Class for getting weatherdata from the web&#13;&#10;&#13;&#10;Make sure you have inserted the class _OSKernel into your project!&#13;&#10;Otherwise the init of the HTTP-Client, without an entry in the autoexec.lsl, will not work!&#13;&#10;SET IP x DNS has to be set, otherwise the URL request will not work!&#13;&#10;">
	<Channels>
		<Server Name="AutoUpdate" GUID="{4B5CC98F-4D8A-46B3-9159-F9AD99E61132}" Visualized="true" Initialize="true" DefValue="15" WriteProtected="false" Retentive="SRam" Comment="Interval for automatically updating the data (in minutes).&#13;&#10;In auto-update mode also the URL will be set automatically!&#13;&#10;&#13;&#10;0 = Disable auto-update.&#13;&#10;&#13;&#10;"/>
		<Server Name="Day1_DD_MM" GUID="{D89A342A-41A4-45DB-BDE4-592545A830DD}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false" Comment="Day 1 Day and Month"/>
		<Server Name="Day1ActTemperature" GUID="{783535FE-C493-46A1-A33D-763974F81EA5}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 actual temperature"/>
		<Server Name="Day1Cloudcover" GUID="{F46E06D3-F179-4EE3-8013-FFB70F635EAD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 cloudcover"/>
		<Server Name="Day1Humidity" GUID="{0C95C533-287A-42EC-B072-4DF2BB681085}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 humidity"/>
		<Server Name="Day1MaxTemperature" GUID="{4FBE260A-AF00-432C-B17E-EDCA28ADE0FD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 maximal temperature"/>
		<Server Name="Day1MinTemperature" GUID="{21EA562A-16DB-4733-9B0E-6592022A6070}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 minimal temperature"/>
		<Server Name="Day1Pressure" GUID="{06A29DEB-16C0-4A42-995A-293B348E73E6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 air pressure"/>
		<Server Name="Day1SymbolCode0" GUID="{DA90631A-CE9D-4CC6-962D-FFCDF88565F9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 symbol code for now&#13;&#10;&#13;&#10;night / day&#13;&#10;1001 / 2001 ... clear sky &#13;&#10;1002 / 2002 ... few clouds  &#13;&#10;1003 / 2003 ... scattered clouds  &#13;&#10;1004 / 2004 ... broken clouds  &#13;&#10;1009 / 2009 ... shower rain  &#13;&#10;1010 / 2010 ... rain  &#13;&#10;1011 / 2011 ... thunderstorm  &#13;&#10;1013 / 2013 ... snow  &#13;&#10;1050 / 2050 ... mist  &#13;&#10;"/>
		<Server Name="Day1SymbolCode3" GUID="{3760BCA2-EECB-4603-B793-1C8FABEEA7AB}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 symbol code for &quot;in 3 hours&quot;&#13;&#10;&#13;&#10;night / day&#13;&#10;1001 / 2001 ... clear sky &#13;&#10;1002 / 2002 ... few clouds  &#13;&#10;1003 / 2003 ... scattered clouds  &#13;&#10;1004 / 2004 ... broken clouds  &#13;&#10;1009 / 2009 ... shower rain  &#13;&#10;1010 / 2010 ... rain  &#13;&#10;1011 / 2011 ... thunderstorm  &#13;&#10;1013 / 2013 ... snow  &#13;&#10;1050 / 2050 ... mist  &#13;&#10;"/>
		<Server Name="Day1WeatherCode0" GUID="{43268B7F-3E05-47C4-B605-662AE1C033E4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 fine weather code for now (xml symbol number)&#13;&#10;&#13;&#10;--&gt; Group 2xx: Thunderstorm&#13;&#10;200 thunderstorm with light rain&#13;&#10;201 thunderstorm with rain&#13;&#10;202 thunderstorm with heavy rain&#13;&#10;210 light thunderstorm&#13;&#10;211 thunderstorm&#13;&#10;212 heavy thunderstorm&#13;&#10;221 ragged thunderstorm&#13;&#10;230 thunderstorm with light drizzle&#13;&#10;231 thunderstorm with drizzle&#13;&#10;232 thunderstorm with heavy drizzle&#13;&#10;&#13;&#10;--&gt; Group 3xx: Drizzle&#13;&#10;300 light intensity drizzle&#13;&#10;301 drizzle&#13;&#10;302 heavy intensity drizzle&#13;&#10;310 light intensity drizzle rain&#13;&#10;311 drizzle rain&#13;&#10;312 heavy intensity drizzle rain&#13;&#10;313 shower rain and drizzle&#13;&#10;314 heavy shower rain and drizzle&#13;&#10;321 shower drizzle&#13;&#10; &#13;&#10;--&gt; Group 5xx: Rain &#13;&#10;500 light rain&#13;&#10;501 moderate rain&#13;&#10;502 heavy intensity rain&#13;&#10;503 very heavy rain&#13;&#10;504 extreme rain&#13;&#10;511 freezing rain&#13;&#10;520 light intensity shower rain&#13;&#10;521 shower rain&#13;&#10;522 heavy intensity shower rain&#13;&#10;531 ragged shower rain&#13;&#10; &#13;&#10;--&gt; Group 6xx: Snow&#13;&#10;600 light snow&#13;&#10;601 snow&#13;&#10;602 heavy snow&#13;&#10;611 sleet&#13;&#10;612 shower sleet&#13;&#10;615 light rain and snow&#13;&#10;616 rain and snow&#13;&#10;620 light shower snow&#13;&#10;621 shower snow&#13;&#10;622 heavy shower snow&#13;&#10; &#13;&#10;--&gt; Group 7xx: Atmosphere&#13;&#10;701 mist&#13;&#10;711 smoke&#13;&#10;721 haze&#13;&#10;731 sand, dust whirls&#13;&#10;741 fog&#13;&#10;751 sand&#13;&#10;761 dust&#13;&#10;762 volcanic ash&#13;&#10;771 squalls&#13;&#10;781 tornado&#13;&#10; &#13;&#10;--&gt; Group 800: Clear&#13;&#10;800 clear sky&#13;&#10; &#13;&#10;--&gt; Group 80x: Clouds&#13;&#10;801 few clouds&#13;&#10;802 scattered clouds&#13;&#10;803 broken clouds&#13;&#10;804 overcast clouds&#13;&#10; &#13;&#10;--&gt; Group 90x: Extreme&#13;&#10;900 tornado  &#13;&#10;901 tropical storm  &#13;&#10;902 hurricane  &#13;&#10;903 cold  &#13;&#10;904 hot  &#13;&#10;905 windy  &#13;&#10;906 hail  &#13;&#10; &#13;&#10;--&gt; Group 9xx: Additional&#13;&#10;951 calm  &#13;&#10;952 light breeze  &#13;&#10;953 gentle breeze  &#13;&#10;954 moderate breeze  &#13;&#10;955 fresh breeze  &#13;&#10;956 strong breeze  &#13;&#10;957 high wind, near gale  &#13;&#10;958 gale  &#13;&#10;959 severe gale  &#13;&#10;960 storm  &#13;&#10;961 violent storm  &#13;&#10;962 hurricane  &#13;&#10;"/>
		<Server Name="Day1WeatherCode3" GUID="{6BECA2A2-B849-4DC4-B84C-833D482399FD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 fine weather code for &quot;in 3 hours&quot; (xml symbol number)&#13;&#10;&#13;&#10;--&gt; Group 2xx: Thunderstorm&#13;&#10;200 thunderstorm with light rain&#13;&#10;201 thunderstorm with rain&#13;&#10;202 thunderstorm with heavy rain&#13;&#10;210 light thunderstorm&#13;&#10;211 thunderstorm&#13;&#10;212 heavy thunderstorm&#13;&#10;221 ragged thunderstorm&#13;&#10;230 thunderstorm with light drizzle&#13;&#10;231 thunderstorm with drizzle&#13;&#10;232 thunderstorm with heavy drizzle&#13;&#10;&#13;&#10;--&gt; Group 3xx: Drizzle&#13;&#10;300 light intensity drizzle&#13;&#10;301 drizzle&#13;&#10;302 heavy intensity drizzle&#13;&#10;310 light intensity drizzle rain&#13;&#10;311 drizzle rain&#13;&#10;312 heavy intensity drizzle rain&#13;&#10;313 shower rain and drizzle&#13;&#10;314 heavy shower rain and drizzle&#13;&#10;321 shower drizzle&#13;&#10; &#13;&#10;--&gt; Group 5xx: Rain &#13;&#10;500 light rain&#13;&#10;501 moderate rain&#13;&#10;502 heavy intensity rain&#13;&#10;503 very heavy rain&#13;&#10;504 extreme rain&#13;&#10;511 freezing rain&#13;&#10;520 light intensity shower rain&#13;&#10;521 shower rain&#13;&#10;522 heavy intensity shower rain&#13;&#10;531 ragged shower rain&#13;&#10; &#13;&#10;--&gt; Group 6xx: Snow&#13;&#10;600 light snow&#13;&#10;601 snow&#13;&#10;602 heavy snow&#13;&#10;611 sleet&#13;&#10;612 shower sleet&#13;&#10;615 light rain and snow&#13;&#10;616 rain and snow&#13;&#10;620 light shower snow&#13;&#10;621 shower snow&#13;&#10;622 heavy shower snow&#13;&#10; &#13;&#10;--&gt; Group 7xx: Atmosphere&#13;&#10;701 mist&#13;&#10;711 smoke&#13;&#10;721 haze&#13;&#10;731 sand, dust whirls&#13;&#10;741 fog&#13;&#10;751 sand&#13;&#10;761 dust&#13;&#10;762 volcanic ash&#13;&#10;771 squalls&#13;&#10;781 tornado&#13;&#10; &#13;&#10;--&gt; Group 800: Clear&#13;&#10;800 clear sky&#13;&#10; &#13;&#10;--&gt; Group 80x: Clouds&#13;&#10;801 few clouds&#13;&#10;802 scattered clouds&#13;&#10;803 broken clouds&#13;&#10;804 overcast clouds&#13;&#10; &#13;&#10;--&gt; Group 90x: Extreme&#13;&#10;900 tornado  &#13;&#10;901 tropical storm  &#13;&#10;902 hurricane  &#13;&#10;903 cold  &#13;&#10;904 hot  &#13;&#10;905 windy  &#13;&#10;906 hail  &#13;&#10; &#13;&#10;--&gt; Group 9xx: Additional&#13;&#10;951 calm  &#13;&#10;952 light breeze  &#13;&#10;953 gentle breeze  &#13;&#10;954 moderate breeze  &#13;&#10;955 fresh breeze  &#13;&#10;956 strong breeze  &#13;&#10;957 high wind, near gale  &#13;&#10;958 gale  &#13;&#10;959 severe gale  &#13;&#10;960 storm  &#13;&#10;961 violent storm  &#13;&#10;962 hurricane  &#13;&#10;"/>
		<Server Name="Day1WindDegree" GUID="{2F550BB0-BCEF-4DE5-B2A1-B99105290A0B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 winddirection degrees"/>
		<Server Name="Day1WindSpeed" GUID="{3A04704D-8400-46D4-A47A-88140CF9D6B9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 1 windspeed"/>
		<Server Name="Day2_DD_MM" GUID="{9DDA97A9-3608-4E8B-A015-2C8CC30EA0FF}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false" Comment="Day 2 Day and Month"/>
		<Server Name="Day2MaxTemperature" GUID="{C0200F93-4628-4D73-96DF-69083A735C88}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 2 maximal temperature"/>
		<Server Name="Day2MinTemperature" GUID="{00C51EF5-116B-4425-A0C5-1B3B6F854324}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 2 minimal temperature"/>
		<Server Name="Day2SymbolCode" GUID="{F1B07D01-8B22-46AC-976E-F7527E17F4FE}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 2 symbol code&#13;&#10;&#13;&#10;night / day&#13;&#10;1001 / 2001 ... clear sky &#13;&#10;1002 / 2002 ... few clouds  &#13;&#10;1003 / 2003 ... scattered clouds  &#13;&#10;1004 / 2004 ... broken clouds  &#13;&#10;1009 / 2009 ... shower rain  &#13;&#10;1010 / 2010 ... rain  &#13;&#10;1011 / 2011 ... thunderstorm  &#13;&#10;1013 / 2013 ... snow  &#13;&#10;1050 / 2050 ... mist  &#13;&#10;"/>
		<Server Name="Day2WeatherCode" GUID="{96F95B5A-1B90-4DFD-B6EB-897C979BED4B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 2 fine weather code (xml symbol number)&#13;&#10;&#13;&#10;--&gt; Group 2xx: Thunderstorm&#13;&#10;200 thunderstorm with light rain&#13;&#10;201 thunderstorm with rain&#13;&#10;202 thunderstorm with heavy rain&#13;&#10;210 light thunderstorm&#13;&#10;211 thunderstorm&#13;&#10;212 heavy thunderstorm&#13;&#10;221 ragged thunderstorm&#13;&#10;230 thunderstorm with light drizzle&#13;&#10;231 thunderstorm with drizzle&#13;&#10;232 thunderstorm with heavy drizzle&#13;&#10;&#13;&#10;--&gt; Group 3xx: Drizzle&#13;&#10;300 light intensity drizzle&#13;&#10;301 drizzle&#13;&#10;302 heavy intensity drizzle&#13;&#10;310 light intensity drizzle rain&#13;&#10;311 drizzle rain&#13;&#10;312 heavy intensity drizzle rain&#13;&#10;313 shower rain and drizzle&#13;&#10;314 heavy shower rain and drizzle&#13;&#10;321 shower drizzle&#13;&#10; &#13;&#10;--&gt; Group 5xx: Rain &#13;&#10;500 light rain&#13;&#10;501 moderate rain&#13;&#10;502 heavy intensity rain&#13;&#10;503 very heavy rain&#13;&#10;504 extreme rain&#13;&#10;511 freezing rain&#13;&#10;520 light intensity shower rain&#13;&#10;521 shower rain&#13;&#10;522 heavy intensity shower rain&#13;&#10;531 ragged shower rain&#13;&#10; &#13;&#10;--&gt; Group 6xx: Snow&#13;&#10;600 light snow&#13;&#10;601 snow&#13;&#10;602 heavy snow&#13;&#10;611 sleet&#13;&#10;612 shower sleet&#13;&#10;615 light rain and snow&#13;&#10;616 rain and snow&#13;&#10;620 light shower snow&#13;&#10;621 shower snow&#13;&#10;622 heavy shower snow&#13;&#10; &#13;&#10;--&gt; Group 7xx: Atmosphere&#13;&#10;701 mist&#13;&#10;711 smoke&#13;&#10;721 haze&#13;&#10;731 sand, dust whirls&#13;&#10;741 fog&#13;&#10;751 sand&#13;&#10;761 dust&#13;&#10;762 volcanic ash&#13;&#10;771 squalls&#13;&#10;781 tornado&#13;&#10; &#13;&#10;--&gt; Group 800: Clear&#13;&#10;800 clear sky&#13;&#10; &#13;&#10;--&gt; Group 80x: Clouds&#13;&#10;801 few clouds&#13;&#10;802 scattered clouds&#13;&#10;803 broken clouds&#13;&#10;804 overcast clouds&#13;&#10; &#13;&#10;--&gt; Group 90x: Extreme&#13;&#10;900 tornado  &#13;&#10;901 tropical storm  &#13;&#10;902 hurricane  &#13;&#10;903 cold  &#13;&#10;904 hot  &#13;&#10;905 windy  &#13;&#10;906 hail  &#13;&#10; &#13;&#10;--&gt; Group 9xx: Additional&#13;&#10;951 calm  &#13;&#10;952 light breeze  &#13;&#10;953 gentle breeze  &#13;&#10;954 moderate breeze  &#13;&#10;955 fresh breeze  &#13;&#10;956 strong breeze  &#13;&#10;957 high wind, near gale  &#13;&#10;958 gale  &#13;&#10;959 severe gale  &#13;&#10;960 storm  &#13;&#10;961 violent storm  &#13;&#10;962 hurricane  &#13;&#10;"/>
		<Server Name="Day3_DD_MM" GUID="{CE1F1241-AA1E-4952-9B68-CAFD9C0529BD}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false" Comment="Day 3 Day and Month"/>
		<Server Name="Day3MaxTemperature" GUID="{278CD5CC-6945-4337-A676-6C1E04302BF2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 3 maximal temperature"/>
		<Server Name="Day3MinTemperature" GUID="{7B2754F2-AD4E-4011-B911-5A7F8C9D5673}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 3 minimal temperature"/>
		<Server Name="Day3SymbolCode" GUID="{68349658-8B5A-46A9-B893-AB6DB9DB2E80}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 3 symbol code&#13;&#10;&#13;&#10;night / day&#13;&#10;1001 / 2001 ... clear sky &#13;&#10;1002 / 2002 ... few clouds  &#13;&#10;1003 / 2003 ... scattered clouds  &#13;&#10;1004 / 2004 ... broken clouds  &#13;&#10;1009 / 2009 ... shower rain  &#13;&#10;1010 / 2010 ... rain  &#13;&#10;1011 / 2011 ... thunderstorm  &#13;&#10;1013 / 2013 ... snow  &#13;&#10;1050 / 2050 ... mist  &#13;&#10;"/>
		<Server Name="Day3WeatherCode" GUID="{6A0C21BC-C390-4D19-9AB8-44453B7AED0A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 3 fine weather code (xml symbol number)&#13;&#10;&#13;&#10;--&gt; Group 2xx: Thunderstorm&#13;&#10;200 thunderstorm with light rain&#13;&#10;201 thunderstorm with rain&#13;&#10;202 thunderstorm with heavy rain&#13;&#10;210 light thunderstorm&#13;&#10;211 thunderstorm&#13;&#10;212 heavy thunderstorm&#13;&#10;221 ragged thunderstorm&#13;&#10;230 thunderstorm with light drizzle&#13;&#10;231 thunderstorm with drizzle&#13;&#10;232 thunderstorm with heavy drizzle&#13;&#10;&#13;&#10;--&gt; Group 3xx: Drizzle&#13;&#10;300 light intensity drizzle&#13;&#10;301 drizzle&#13;&#10;302 heavy intensity drizzle&#13;&#10;310 light intensity drizzle rain&#13;&#10;311 drizzle rain&#13;&#10;312 heavy intensity drizzle rain&#13;&#10;313 shower rain and drizzle&#13;&#10;314 heavy shower rain and drizzle&#13;&#10;321 shower drizzle&#13;&#10; &#13;&#10;--&gt; Group 5xx: Rain &#13;&#10;500 light rain&#13;&#10;501 moderate rain&#13;&#10;502 heavy intensity rain&#13;&#10;503 very heavy rain&#13;&#10;504 extreme rain&#13;&#10;511 freezing rain&#13;&#10;520 light intensity shower rain&#13;&#10;521 shower rain&#13;&#10;522 heavy intensity shower rain&#13;&#10;531 ragged shower rain&#13;&#10; &#13;&#10;--&gt; Group 6xx: Snow&#13;&#10;600 light snow&#13;&#10;601 snow&#13;&#10;602 heavy snow&#13;&#10;611 sleet&#13;&#10;612 shower sleet&#13;&#10;615 light rain and snow&#13;&#10;616 rain and snow&#13;&#10;620 light shower snow&#13;&#10;621 shower snow&#13;&#10;622 heavy shower snow&#13;&#10; &#13;&#10;--&gt; Group 7xx: Atmosphere&#13;&#10;701 mist&#13;&#10;711 smoke&#13;&#10;721 haze&#13;&#10;731 sand, dust whirls&#13;&#10;741 fog&#13;&#10;751 sand&#13;&#10;761 dust&#13;&#10;762 volcanic ash&#13;&#10;771 squalls&#13;&#10;781 tornado&#13;&#10; &#13;&#10;--&gt; Group 800: Clear&#13;&#10;800 clear sky&#13;&#10; &#13;&#10;--&gt; Group 80x: Clouds&#13;&#10;801 few clouds&#13;&#10;802 scattered clouds&#13;&#10;803 broken clouds&#13;&#10;804 overcast clouds&#13;&#10; &#13;&#10;--&gt; Group 90x: Extreme&#13;&#10;900 tornado  &#13;&#10;901 tropical storm  &#13;&#10;902 hurricane  &#13;&#10;903 cold  &#13;&#10;904 hot  &#13;&#10;905 windy  &#13;&#10;906 hail  &#13;&#10; &#13;&#10;--&gt; Group 9xx: Additional&#13;&#10;951 calm  &#13;&#10;952 light breeze  &#13;&#10;953 gentle breeze  &#13;&#10;954 moderate breeze  &#13;&#10;955 fresh breeze  &#13;&#10;956 strong breeze  &#13;&#10;957 high wind, near gale  &#13;&#10;958 gale  &#13;&#10;959 severe gale  &#13;&#10;960 storm  &#13;&#10;961 violent storm  &#13;&#10;962 hurricane  &#13;&#10;"/>
		<Server Name="Day4_DD_MM" GUID="{6B9DB773-F9E9-42E5-BD3A-C347EF8DF822}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false" Comment="Day 4 Day and Month"/>
		<Server Name="Day4MaxTemperature" GUID="{F6C73B79-F020-4F5E-85EB-D4350A980DEA}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 4 maximal temperature"/>
		<Server Name="Day4MinTemperature" GUID="{096E868C-419D-4542-80BF-07EEF84B2503}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 4 minimal temperature"/>
		<Server Name="Day4SymbolCode" GUID="{09BC2E10-42B9-4755-A19D-B42C995F52AD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 4 symbol code&#13;&#10;&#13;&#10;night / day&#13;&#10;1001 / 2001 ... clear sky &#13;&#10;1002 / 2002 ... few clouds  &#13;&#10;1003 / 2003 ... scattered clouds  &#13;&#10;1004 / 2004 ... broken clouds  &#13;&#10;1009 / 2009 ... shower rain  &#13;&#10;1010 / 2010 ... rain  &#13;&#10;1011 / 2011 ... thunderstorm  &#13;&#10;1013 / 2013 ... snow  &#13;&#10;1050 / 2050 ... mist  &#13;&#10;"/>
		<Server Name="Day4WeatherCode" GUID="{30AEECBA-B92C-4600-B443-0A7D4F693FDD}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 4 fine weather code (xml symbol number)&#13;&#10;&#13;&#10;--&gt; Group 2xx: Thunderstorm&#13;&#10;200 thunderstorm with light rain&#13;&#10;201 thunderstorm with rain&#13;&#10;202 thunderstorm with heavy rain&#13;&#10;210 light thunderstorm&#13;&#10;211 thunderstorm&#13;&#10;212 heavy thunderstorm&#13;&#10;221 ragged thunderstorm&#13;&#10;230 thunderstorm with light drizzle&#13;&#10;231 thunderstorm with drizzle&#13;&#10;232 thunderstorm with heavy drizzle&#13;&#10;&#13;&#10;--&gt; Group 3xx: Drizzle&#13;&#10;300 light intensity drizzle&#13;&#10;301 drizzle&#13;&#10;302 heavy intensity drizzle&#13;&#10;310 light intensity drizzle rain&#13;&#10;311 drizzle rain&#13;&#10;312 heavy intensity drizzle rain&#13;&#10;313 shower rain and drizzle&#13;&#10;314 heavy shower rain and drizzle&#13;&#10;321 shower drizzle&#13;&#10; &#13;&#10;--&gt; Group 5xx: Rain &#13;&#10;500 light rain&#13;&#10;501 moderate rain&#13;&#10;502 heavy intensity rain&#13;&#10;503 very heavy rain&#13;&#10;504 extreme rain&#13;&#10;511 freezing rain&#13;&#10;520 light intensity shower rain&#13;&#10;521 shower rain&#13;&#10;522 heavy intensity shower rain&#13;&#10;531 ragged shower rain&#13;&#10; &#13;&#10;--&gt; Group 6xx: Snow&#13;&#10;600 light snow&#13;&#10;601 snow&#13;&#10;602 heavy snow&#13;&#10;611 sleet&#13;&#10;612 shower sleet&#13;&#10;615 light rain and snow&#13;&#10;616 rain and snow&#13;&#10;620 light shower snow&#13;&#10;621 shower snow&#13;&#10;622 heavy shower snow&#13;&#10; &#13;&#10;--&gt; Group 7xx: Atmosphere&#13;&#10;701 mist&#13;&#10;711 smoke&#13;&#10;721 haze&#13;&#10;731 sand, dust whirls&#13;&#10;741 fog&#13;&#10;751 sand&#13;&#10;761 dust&#13;&#10;762 volcanic ash&#13;&#10;771 squalls&#13;&#10;781 tornado&#13;&#10; &#13;&#10;--&gt; Group 800: Clear&#13;&#10;800 clear sky&#13;&#10; &#13;&#10;--&gt; Group 80x: Clouds&#13;&#10;801 few clouds&#13;&#10;802 scattered clouds&#13;&#10;803 broken clouds&#13;&#10;804 overcast clouds&#13;&#10; &#13;&#10;--&gt; Group 90x: Extreme&#13;&#10;900 tornado  &#13;&#10;901 tropical storm  &#13;&#10;902 hurricane  &#13;&#10;903 cold  &#13;&#10;904 hot  &#13;&#10;905 windy  &#13;&#10;906 hail  &#13;&#10; &#13;&#10;--&gt; Group 9xx: Additional&#13;&#10;951 calm  &#13;&#10;952 light breeze  &#13;&#10;953 gentle breeze  &#13;&#10;954 moderate breeze  &#13;&#10;955 fresh breeze  &#13;&#10;956 strong breeze  &#13;&#10;957 high wind, near gale  &#13;&#10;958 gale  &#13;&#10;959 severe gale  &#13;&#10;960 storm  &#13;&#10;961 violent storm  &#13;&#10;962 hurricane  &#13;&#10;"/>
		<Server Name="Day5_DD_MM" GUID="{CB236B0D-174D-4081-8F37-087EEF076E04}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false" Comment="Day 5 Day and Month"/>
		<Server Name="Day5MaxTemperature" GUID="{E95D2EBA-01F9-434F-A61F-C5B9CC0FF668}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 5 maximal temperature"/>
		<Server Name="Day5MinTemperature" GUID="{BAF5DCEA-8A8C-457D-B6D2-587FC402A338}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 5 minimal temperature"/>
		<Server Name="Day5SymbolCode" GUID="{93E44DBE-5BC2-4D14-994D-2C0BD44DAF76}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 5 symbol code&#13;&#10;&#13;&#10;night / day&#13;&#10;1001 / 2001 ... clear sky &#13;&#10;1002 / 2002 ... few clouds  &#13;&#10;1003 / 2003 ... scattered clouds  &#13;&#10;1004 / 2004 ... broken clouds  &#13;&#10;1009 / 2009 ... shower rain  &#13;&#10;1010 / 2010 ... rain  &#13;&#10;1011 / 2011 ... thunderstorm  &#13;&#10;1013 / 2013 ... snow  &#13;&#10;1050 / 2050 ... mist  &#13;&#10;"/>
		<Server Name="Day5WeatherCode" GUID="{7D53A247-81F4-4DD8-AEE1-696503EF8840}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Day 5 fine weather code (xml symbol number)&#13;&#10;&#13;&#10;--&gt; Group 2xx: Thunderstorm&#13;&#10;200 thunderstorm with light rain&#13;&#10;201 thunderstorm with rain&#13;&#10;202 thunderstorm with heavy rain&#13;&#10;210 light thunderstorm&#13;&#10;211 thunderstorm&#13;&#10;212 heavy thunderstorm&#13;&#10;221 ragged thunderstorm&#13;&#10;230 thunderstorm with light drizzle&#13;&#10;231 thunderstorm with drizzle&#13;&#10;232 thunderstorm with heavy drizzle&#13;&#10;&#13;&#10;--&gt; Group 3xx: Drizzle&#13;&#10;300 light intensity drizzle&#13;&#10;301 drizzle&#13;&#10;302 heavy intensity drizzle&#13;&#10;310 light intensity drizzle rain&#13;&#10;311 drizzle rain&#13;&#10;312 heavy intensity drizzle rain&#13;&#10;313 shower rain and drizzle&#13;&#10;314 heavy shower rain and drizzle&#13;&#10;321 shower drizzle&#13;&#10; &#13;&#10;--&gt; Group 5xx: Rain &#13;&#10;500 light rain&#13;&#10;501 moderate rain&#13;&#10;502 heavy intensity rain&#13;&#10;503 very heavy rain&#13;&#10;504 extreme rain&#13;&#10;511 freezing rain&#13;&#10;520 light intensity shower rain&#13;&#10;521 shower rain&#13;&#10;522 heavy intensity shower rain&#13;&#10;531 ragged shower rain&#13;&#10; &#13;&#10;--&gt; Group 6xx: Snow&#13;&#10;600 light snow&#13;&#10;601 snow&#13;&#10;602 heavy snow&#13;&#10;611 sleet&#13;&#10;612 shower sleet&#13;&#10;615 light rain and snow&#13;&#10;616 rain and snow&#13;&#10;620 light shower snow&#13;&#10;621 shower snow&#13;&#10;622 heavy shower snow&#13;&#10; &#13;&#10;--&gt; Group 7xx: Atmosphere&#13;&#10;701 mist&#13;&#10;711 smoke&#13;&#10;721 haze&#13;&#10;731 sand, dust whirls&#13;&#10;741 fog&#13;&#10;751 sand&#13;&#10;761 dust&#13;&#10;762 volcanic ash&#13;&#10;771 squalls&#13;&#10;781 tornado&#13;&#10; &#13;&#10;--&gt; Group 800: Clear&#13;&#10;800 clear sky&#13;&#10; &#13;&#10;--&gt; Group 80x: Clouds&#13;&#10;801 few clouds&#13;&#10;802 scattered clouds&#13;&#10;803 broken clouds&#13;&#10;804 overcast clouds&#13;&#10; &#13;&#10;--&gt; Group 90x: Extreme&#13;&#10;900 tornado  &#13;&#10;901 tropical storm  &#13;&#10;902 hurricane  &#13;&#10;903 cold  &#13;&#10;904 hot  &#13;&#10;905 windy  &#13;&#10;906 hail  &#13;&#10; &#13;&#10;--&gt; Group 9xx: Additional&#13;&#10;951 calm  &#13;&#10;952 light breeze  &#13;&#10;953 gentle breeze  &#13;&#10;954 moderate breeze  &#13;&#10;955 fresh breeze  &#13;&#10;956 strong breeze  &#13;&#10;957 high wind, near gale  &#13;&#10;958 gale  &#13;&#10;959 severe gale  &#13;&#10;960 storm  &#13;&#10;961 violent storm  &#13;&#10;962 hurricane  &#13;&#10;"/>
		<Server Name="LastLocationName" GUID="{02D58C75-8D08-43D5-8157-134E63CD5E39}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="true" Retentive="false" Comment="Location name out of the last updated weatherdata"/>
		<Server Name="LastUpdateTime" GUID="{49CF6C80-32D3-49F6-98AA-D6E5AA06235E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Time of last successful update (time of your system)"/>
		<Server Name="ProxyAddress" GUID="{66381F65-255D-4E92-87AE-3E7B2C59CF90}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="if your system is behind a proxy server, insert the address of your proxy server here"/>
		<Server Name="ProxyIsUsed" GUID="{600A4703-770D-405D-A239-05F31795417E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="0 = no proxy server used&#13;&#10;1 = proxy server used&#13;&#10;&#13;&#10;You have to disable and re-enable&#13;&#10;the proxyserver to accept changes.&#13;&#10;(Username,...)"/>
		<Server Name="ProxyPassword" GUID="{9547E044-68A3-439A-875E-B10F129B78DC}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="password for the proxy server"/>
		<Server Name="ProxyPort" GUID="{14F20765-B17A-4EAB-9795-606A2D484F3A}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="proxy server port"/>
		<Server Name="ProxyUser" GUID="{CF452DC3-5069-4C22-B75D-E7209D07D9EA}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="username for the proxy server"/>
		<Server Name="Reset_URL" GUID="{2BC43699-9FDA-41EF-A88D-082F649C9C87}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Write to this server to set the URL to default"/>
		<Server Name="Status" GUID="{A7135D91-020F-425A-9825-FBB953231BC9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Write to manually update the data.&#13;&#10;&#13;&#10;Class internal:&#13;&#10;-1 = Error: not enough data received&#13;&#10;-2 = Error: HTTP Client not initialized&#13;&#10;-3 = Error: service not avaiable&#13;&#10;-4 = Error: no Connection&#13;&#10;-5 = Error writing XML file&#13;&#10;-6 = Error reading XML file&#13;&#10;-7 = Error: wrong XML format&#13;&#10;99 = new data in process&#13;&#10;&#13;&#10;Standard HTTP codes:&#13;&#10;200 = HTTP request OK&#13;&#10;&#13;&#10;More codes:&#13;&#10;http://en.wikipedia.org/wiki/List_of_HTTP_status_codes&#13;&#10;"/>
		<Server Name="WeatherLocCountry" GUID="{0FF3F436-A20F-489A-919A-8DBF2ABFDF7D}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="if using type &quot;Location per Name+Country&quot;:&#13;&#10;Location COUNTRY where you want the weatherdata from&#13;&#10;(ISO 3166 country codes)"/>
		<Server Name="WeatherLocID" GUID="{8562372D-07EA-4FCE-A96E-1EB9B82049AE}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="if using type &quot;Location per ID&quot;:&#13;&#10;Location ID where you want the weatherdata from&#13;&#10;&#13;&#10;Link: &quot;http://bulk.openweathermap.org/sample/&quot;&#13;&#10;File &quot;city.list.json.gz&quot;&#13;&#10;&#13;&#10;Examples:&#13;&#10;7872210 ... Lamprechtshausen&#13;&#10;2761367 ... Wien&#13;&#10;2950159 ... Berlin&#13;&#10;3169070 ... Rom (Roma)&#13;&#10;6455259 ... Paris&#13;&#10;2643743 ... London&#13;&#10;5128638 ... New York&#13;&#10;1850147 ... Tokyo&#13;&#10;1816670 ... Peking (Beijing)&#13;&#10;"/>
		<Server Name="WeatherLocMode" GUID="{7D5AACCC-2252-4A60-9EDF-1F518C80A119}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="type of location for URL&#13;&#10;0 = use &quot;Location per ID&quot; (recommended!!)&#13;&#10;1 = use &quot;Location per Name+Country&quot;"/>
		<Server Name="WeatherLocName" GUID="{3BD42CE9-22BF-4838-97EB-2BEFF5FDDB0E}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="if using type &quot;Location per Name+Country&quot;:&#13;&#10;Location NAME where you want the weatherdata from"/>
		<Server Name="WeatherURL" GUID="{51DDB3B2-6BD3-44AB-98EE-098792BAE937}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="URL for requesting&#13;&#10;use the server &quot;Reset_URL&quot; to create the URL depending on other class-servers"/>
		<Server Name="WeatherUserID" GUID="{49B29A40-103F-45C5-97CB-20C00BE39744}" Class="StringInternal" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="User-ID for openweathermap.org&#13;&#10;make an account: &#13;&#10;https://home.openweathermap.org/users/sign_up"/>
		<Client Name="_FileSys" Required="false" Internal="false" Comment="object channel to _FileSys (don&apos;t connect!)"/>
		<Client Name="_MultiTask" Required="false" Internal="false" Comment="object channel to _MultiTask (don&apos;t connect!)"/>
		<Client Name="_OSKernel" Required="false" Internal="false" Comment="object channel to _OSKernel (don&apos;t connect)&#13;&#10;(Add Library -&gt; OS Interface)"/>
		<Client Name="_XMLReader" Required="true" Internal="false" Comment="object channel to class _XMLReader"/>
		<Client Name="SDT_SysTime" Required="true" Internal="false" Comment="connect to class _SysDateTime, server SysTime"/>
		<Client Name="SigCLib" Required="false" Internal="false" Comment="object channel to SigCLib (don&apos;t connect!)"/>
		<Client Name="Str_Day1_DD_MM" Required="true" Internal="true"/>
		<Client Name="Str_Day2_DD_MM" Required="true" Internal="true"/>
		<Client Name="Str_Day3_DD_MM" Required="true" Internal="true"/>
		<Client Name="Str_Day4_DD_MM" Required="true" Internal="true"/>
		<Client Name="Str_Day5_DD_MM" Required="true" Internal="true"/>
		<Client Name="Str_LastLocationName" Required="true" Internal="true"/>
		<Client Name="Str_ProxyAddress" Required="true" Internal="true"/>
		<Client Name="Str_ProxyPassword" Required="true" Internal="true"/>
		<Client Name="Str_ProxyPort" Required="true" Internal="true"/>
		<Client Name="Str_ProxyUser" Required="true" Internal="true"/>
		<Client Name="Str_WeatherLocCountry" Required="true" Internal="true"/>
		<Client Name="Str_WeatherLocID" Required="true" Internal="true"/>
		<Client Name="Str_WeatherLocName" Required="true" Internal="true"/>
		<Client Name="Str_WeatherURL" Required="true" Internal="true"/>
		<Client Name="Str_WeatherUserID" Required="true" Internal="true"/>
		<Client Name="UTC_Offset" Required="true" Internal="false" Comment="Offset to UTC standard time (in hours)"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\lsl_st_httpclient.h" Include="true"/>
			<File Path=".\Class\_WeatherForecast\_WeatherForecast_de.pdf"/>
			<File Path=".\Class\_WeatherForecast\_WeatherForecast_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.1" Date="2017-10-23" Author="KaiAnd" Company="Sigmatek" Description="the class server &quot;WeatherLocMode&quot; is retentive now"/>
		<Dokumentation Revision="1.0" Date="2017-10-12" Author="KaiAnd" Company="Sigmatek" Description="strongly revised class, based on class SCL_WebWeather V.1.5"/>
	</RevDoku>
	<Network Name="_WeatherForecast">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "Str_Day1_DD_MM"
				GUID       = "{09D5D687-AD24-4EEE-9E04-015DCA30C787}"
				Class      = "StringRAM"
				Position   = "(270,1770)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_Day2_DD_MM"
				GUID       = "{D251C5B5-164C-4511-8B14-110D7EAF21C9}"
				Class      = "StringRAM"
				Position   = "(270,1950)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_Day3_DD_MM"
				GUID       = "{62680236-C46A-4D92-8F5F-F220F46CD053}"
				Class      = "StringRAM"
				Position   = "(270,2130)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_Day4_DD_MM"
				GUID       = "{EC0223FC-8076-4663-A4D0-16C92ECED3CE}"
				Class      = "StringRAM"
				Position   = "(270,2310)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_Day5_DD_MM"
				GUID       = "{12585415-A731-4650-9E2C-073504589FF3}"
				Class      = "StringRAM"
				Position   = "(270,2490)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_LastLocationName"
				GUID       = "{601BA8D8-1928-4F5E-8BC9-4EE5874FFF83}"
				Class      = "StringRAM"
				Position   = "(270,1560)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_ProxyAddress"
				GUID       = "{2AF4F791-C026-4F6C-94E7-5BEEB54324E6}"
				Class      = "StringRAM"
				Position   = "(270,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_ProxyPassword"
				GUID       = "{D93BE7D8-4882-424C-B416-0B513140D223}"
				Class      = "StringRAM"
				Position   = "(270,660)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_ProxyPort"
				GUID       = "{EB1D78A6-5952-41F6-AF7F-A238A203D931}"
				Class      = "StringRAM"
				Position   = "(270,300)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_ProxyUser"
				GUID       = "{A5999CE7-E077-40CD-8518-1EDD386CED7B}"
				Class      = "StringRAM"
				Position   = "(270,480)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_WeatherLocCountry"
				GUID       = "{E40D0819-9147-480C-B904-2194D96A0176}"
				Class      = "StringRAM"
				Position   = "(270,1350)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_WeatherLocID"
				GUID       = "{B8F86278-E02A-44DE-993D-353AEB41C8DB}"
				Class      = "StringRAM"
				Position   = "(270,990)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_WeatherLocName"
				GUID       = "{8CA6C399-6B6E-42F8-AC2B-F964402EAFEF}"
				Class      = "StringRAM"
				Position   = "(270,1170)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_WeatherURL"
				GUID       = "{9ED94B53-4514-4E2A-8ED8-EEF5F3DCD32C}"
				Class      = "StringRAM"
				Position   = "(780,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "Str_WeatherUserID"
				GUID       = "{92501C43-CD0A-4201-87F7-DDFC2ED8F621}"
				Class      = "StringRAM"
				Position   = "(270,810)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Str_ProxyAddress" Destination="Str_ProxyAddress.Data"/>
			<Connection Source="this.Str_ProxyUser" Destination="Str_ProxyUser.Data"/>
			<Connection Source="this.Str_ProxyPassword" Destination="Str_ProxyPassword.Data"/>
			<Connection Source="this.Str_ProxyPort" Destination="Str_ProxyPort.Data"/>
			<Connection Source="this.Str_WeatherLocName" Destination="Str_WeatherLocName.Data"/>
			<Connection Source="this.Str_WeatherLocCountry" Destination="Str_WeatherLocCountry.Data"/>
			<Connection Source="this.ProxyAddress" Destination="Str_ProxyAddress.Data" Vertices="(1268,510),(586,210),"/>
			<Connection Source="this.ProxyUser" Destination="Str_ProxyUser.Data" Vertices="(1268,630),(586,570),"/>
			<Connection Source="this.ProxyPassword" Destination="Str_ProxyPassword.Data" Vertices="(1268,690),(586,750),"/>
			<Connection Source="this.ProxyPort" Destination="Str_ProxyPort.Data" Vertices="(1268,570),(586,390),"/>
			<Connection Source="this.WeatherLocName" Destination="Str_WeatherLocName.Data" Vertices="(1268,930),(586,1260),"/>
			<Connection Source="this.WeatherLocCountry" Destination="Str_WeatherLocCountry.Data" Vertices="(1268,990),(586,1440),"/>
			<Connection Source="this.Str_WeatherUserID" Destination="Str_WeatherUserID.Data"/>
			<Connection Source="this.WeatherUserID" Destination="Str_WeatherUserID.Data" Vertices="(1268,750),(586,900),"/>
			<Connection Source="this.Str_Day1_DD_MM" Destination="Str_Day1_DD_MM.Data"/>
			<Connection Source="this.Day1_DD_MM" Destination="Str_Day1_DD_MM.Data" Vertices="(1268,1170),(586,1860),"/>
			<Connection Source="this.Str_WeatherURL" Destination="Str_WeatherURL.Data"/>
			<Connection Source="this.WeatherURL" Destination="Str_WeatherURL.Data" Vertices="(1268,330),(1096,210),"/>
			<Connection Source="this.Str_WeatherLocID" Destination="Str_WeatherLocID.Data"/>
			<Connection Source="this.Str_Day2_DD_MM" Destination="Str_Day2_DD_MM.Data"/>
			<Connection Source="this.Str_Day3_DD_MM" Destination="Str_Day3_DD_MM.Data"/>
			<Connection Source="this.WeatherLocID" Destination="Str_WeatherLocID.Data" Vertices="(1268,870),(586,1080),"/>
			<Connection Source="this.Str_Day4_DD_MM" Destination="Str_Day4_DD_MM.Data"/>
			<Connection Source="this.Str_Day5_DD_MM" Destination="Str_Day5_DD_MM.Data"/>
			<Connection Source="this.Day2_DD_MM" Destination="Str_Day2_DD_MM.Data" Vertices="(1268,1950),(586,2040),"/>
			<Connection Source="this.Day3_DD_MM" Destination="Str_Day3_DD_MM.Data" Vertices="(1268,2250),(586,2220),"/>
			<Connection Source="this.Day4_DD_MM" Destination="Str_Day4_DD_MM.Data" Vertices="(1268,2550),(586,2400),"/>
			<Connection Source="this.Day5_DD_MM" Destination="Str_Day5_DD_MM.Data" Vertices="(1268,2850),(586,2580),"/>
			<Connection Source="this.Str_LastLocationName" Destination="Str_LastLocationName.Data"/>
			<Connection Source="this.LastLocationName" Destination="Str_LastLocationName.Data" Vertices="(1268,1110),(586,1650),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
_WeatherForecast : CLASS
	TYPE
	  t_e_DecodeSteps :
	  (
	    DC_IDLE,
	    DC_START,
	    DC_WaitForFile,
	    DC_XmlReadFile,
	    DC_XmlReadFile_Wait,
	    DC_XmlGetDataStart,
	    DC_XmlGetData,
	    DC_XmlWorkData,
	    DC_END
	  )$UDINT;
	  t_e_FileSteps :
	  (
	    FILE_IDLE,
	    FILE_ERROR,
	    FILE_START_READ,
	    FILE_FCHECK_READ,
	    FILE_FOPEN_READ,
	    FILE_WAIT_FOPEN_READ,
	    FILE_FLEN_READ,
	    FILE_WAIT_FLEN_READ,
	    FILE_FREAD,
	    FILE_WAIT_FREAD,
	    FILE_CHECK_READDATA,
	    FILE_WORK_READDATA,
	    FILE_START_WRITE,
	    FILE_CHECK_WRITEDATA,
	    FILE_WORK_WRITEDATA,
	    FILE_FDELETE_WRITE,
	    FILE_WAIT_FDELETE_WRITE,
	    FILE_FOPEN_WRITE,
	    FILE_WAIT_FOPEN_WRITE,
	    FILE_FWRITE,
	    FILE_WAIT_FWRITE,
	    FILE_FCLOSE,
	    FILE_WAIT_FCLOSE
	  )$UDINT;
#pragma pack(push, 1)
	  t_e_WeatherData : STRUCT
	    DateStamp : ARRAY [0..10] OF CHAR;
	    fromHH : USINT;
	    LocalTime_DateStamp : ARRAY [0..10] OF CHAR;
	    LocalTime_fromHH : USINT;
	    SymbolCode : INT;
	    SymbolNumber : INT;
	    WindDir_deg : INT;
	    WindSpeed_kmh : INT;
	    TempAct_C : INT;
	    TempMin_C : INT;
	    TempMax_C : INT;
	    Pressure_hPa : INT;
	    humidity_pct : INT;
	    clouds_pct : INT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	Status 	: SvrChCmd_DINT;
	AutoUpdate 	: SvrCh_UDINT;
	WeatherURL 	: SvrChCmd_UDINT;
	Reset_URL 	: SvrCh_DINT;
	ProxyIsUsed 	: SvrCh_DINT;
	ProxyAddress 	: SvrChCmd_UDINT;
	ProxyPort 	: SvrChCmd_UDINT;
	ProxyUser 	: SvrChCmd_UDINT;
	ProxyPassword 	: SvrChCmd_UDINT;
	WeatherUserID 	: SvrChCmd_UDINT;
	WeatherLocMode 	: SvrCh_DINT;
	WeatherLocID 	: SvrChCmd_UDINT;
	WeatherLocName 	: SvrChCmd_UDINT;
	WeatherLocCountry 	: SvrChCmd_UDINT;
	LastUpdateTime 	: SvrCh_HDINT;
	LastLocationName 	: SvrChCmd_UDINT;
	Day1_DD_MM 	: SvrChCmd_UDINT;
	Day1SymbolCode0 	: SvrCh_DINT;
	Day1WeatherCode0 	: SvrCh_DINT;
	Day1SymbolCode3 	: SvrCh_DINT;
	Day1WeatherCode3 	: SvrCh_DINT;
	Day1ActTemperature 	: SvrCh_DINT;
	Day1MinTemperature 	: SvrCh_DINT;
	Day1MaxTemperature 	: SvrCh_DINT;
	Day1WindSpeed 	: SvrCh_DINT;
	Day1WindDegree 	: SvrCh_DINT;
	Day1Pressure 	: SvrCh_DINT;
	Day1Humidity 	: SvrCh_DINT;
	Day1Cloudcover 	: SvrCh_DINT;
	Day2_DD_MM 	: SvrChCmd_UDINT;
	Day2SymbolCode 	: SvrCh_DINT;
	Day2WeatherCode 	: SvrCh_DINT;
	Day2MinTemperature 	: SvrCh_DINT;
	Day2MaxTemperature 	: SvrCh_DINT;
	Day3_DD_MM 	: SvrChCmd_UDINT;
	Day3SymbolCode 	: SvrCh_DINT;
	Day3WeatherCode 	: SvrCh_DINT;
	Day3MinTemperature 	: SvrCh_DINT;
	Day3MaxTemperature 	: SvrCh_DINT;
	Day4_DD_MM 	: SvrChCmd_UDINT;
	Day4SymbolCode 	: SvrCh_DINT;
	Day4WeatherCode 	: SvrCh_DINT;
	Day4MinTemperature 	: SvrCh_DINT;
	Day4MaxTemperature 	: SvrCh_DINT;
	Day5_DD_MM 	: SvrChCmd_UDINT;
	Day5SymbolCode 	: SvrCh_DINT;
	Day5WeatherCode 	: SvrCh_DINT;
	Day5MinTemperature 	: SvrCh_DINT;
	Day5MaxTemperature 	: SvrCh_DINT;
  //Clients:
	_OSKernel 	: CltChCmd__OSKernel;
	SDT_SysTime 	: CltCh_HDINT;
	UTC_Offset 	: CltCh_DINT;
	_MultiTask 	: CltChCmd__MultiTask;
	Str_WeatherURL 	: CltChCmd_StringRAM;
	Str_ProxyPort 	: CltChCmd_StringRAM;
	Str_ProxyUser 	: CltChCmd_StringRAM;
	Str_ProxyPassword 	: CltChCmd_StringRAM;
	Str_WeatherUserID 	: CltChCmd_StringRAM;
	Str_WeatherLocName 	: CltChCmd_StringRAM;
	Str_WeatherLocCountry 	: CltChCmd_StringRAM;
	Str_WeatherLocID 	: CltChCmd_StringRAM;
	Str_ProxyAddress 	: CltChCmd_StringRAM;
	_FileSys 	: CltChCmd__FileSys;
	SigCLib 	: CltChCmd_SigCLib;
	_XMLReader 	: CltChCmd__XMLReader;
	Str_Day1_DD_MM 	: CltChCmd_StringRAM;
	Str_Day2_DD_MM 	: CltChCmd_StringRAM;
	Str_Day3_DD_MM 	: CltChCmd_StringRAM;
	Str_Day4_DD_MM 	: CltChCmd_StringRAM;
	Str_Day5_DD_MM 	: CltChCmd_StringRAM;
	Str_LastLocationName 	: CltChCmd_StringRAM;
  //Variables:
		GetHttpData 	: BOOL;			//! <Variable Comment="flag for retrieving data" Name="GetHttpData"/>
		SetProxy 	: BOOL;			//! <Variable Comment="flag for setting the proxyoptions" Name="SetProxy"/>
		firstAutoUpdate 	: DINT;
		TmAutoUpdate 	: UDINT;			//! <Variable Comment="Timemark for automatic update" Name="TmAutoUpdate"/>
		URL_String : ARRAY [0..512] OF CHAR;

		HTTP_Buffer : ARRAY [0..32767] OF CHAR;
			//! <Variable Comment="Buffer for the received data" Name="HTTP_Buffer"/>
		pHTTPCli 	: ^OS_HTTP_CLIENT;			//! <Variable Comment="HTTP Interface" Name="pHTTPCli"/>
		ProxyString : ARRAY [0..200] OF CHAR;
			//! <Variable Comment="String for the proxyserver&#13;&#10;&quot;http://user:password@hostname.com:port&quot;" Name="ProxyString"/>
		File_DPNE1 : ARRAY [0..127] OF CHAR;

		File_Step 	: t_e_FileSteps;
		File_TimeStampIDLE 	: UDINT;
		File_ActError 	: DINT;
		File_LastError 	: DINT;
		File_AsyncID 	: DINT;
		File_FileHandle 	: DINT;
		File_FileLen 	: UDINT;
		dVar 	: DINT;
		DecodeXmlStep 	: t_e_DecodeSteps;			//! <Variable Comment="Step for decoding the XML-Data" Name="DecodeXmlStep"/>
		Decode_TimeStampIDLE 	: UDINT;
		WeatherData : ARRAY [0..WEATHERFC_XmlEntries] OF t_e_WeatherData;

		pEL_START 	: ^_XML_ELEMENT;
		ActDay 	: DINT;
		URL_StringChkSum 	: DINT;
		TodayTempMin 	: DINT;
		TodayTempMax 	: DINT;
		tmpTxt : ARRAY [0..255] OF CHAR;

  //Functions:
				//! <Function Comment="Initializations ...." Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="Background Task" Name="Background"/>
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="parallel task (thread)" Name="ParallelTask"/>
	FUNCTION GLOBAL ParallelTask;
				//! <Function Comment="function for all the cyclic work" Name="CyclicWork"/>
	FUNCTION GLOBAL CyclicWork;
				//! <Function Comment="create and set the URL for the weather web request" Name="SetWeatherURL"/>
	FUNCTION GLOBAL SetWeatherURL
		VAR_OUTPUT
			udlen 	: UDINT;			//! <Variable Comment="length of the returned URL" Name="SetWeatherURL.udlen"/>
		END_VAR;
				//! <Function Comment="Set if proxy server is used" Name="SetOptions"/>
	FUNCTION GLOBAL SetOptions;
				//! <Function Comment="Function to send a HTTP get order" Name="GetDataOverHttp"/>
	FUNCTION GLOBAL GetDataOverHttp;
				//! <Function Comment="Decoding the XML-file to array of weatherdata" Name="DecodeXmlData"/>
	FUNCTION DecodeXmlData;
				//! <Function Comment="XML file handling asynchron" Name="XmlFileHandling"/>
	FUNCTION XmlFileHandling;
				//! <Function Comment="converts a Char-String to Dint&#13;&#10;also negative and float values are possible!" Name="CharToDint"/>
	FUNCTION CharToDint
		VAR_INPUT
			pBuffer 	: ^USINT;			//! <Variable Comment="Pointer to textbuffer" Name="CharToDint.pBuffer"/>
			DataLen 	: UDINT;			//! <Variable Comment="Number of bytes to be converted" Name="CharToDint.DataLen"/>
		END_VAR
		VAR_OUTPUT
			RetValue 	: DINT;			//! <Variable Comment="Returns the converted value" Name="CharToDint.RetValue"/>
		END_VAR;
				//! <Function Comment="Create the local time &#13;&#10;" Name="MakeLocalTime"/>
	FUNCTION MakeLocalTime
		VAR_INPUT
			pInTime 	: ^CHAR;			//! <Variable Comment="Pointer to a String with the source timestamp&#13;&#10;Format: &quot;2017-10-31 06:00:00&quot;" Name="MakeLocalTime.pInTime"/>
			UTC_Offset 	: DINT;			//! <Variable Comment="UTC Offset in Hours (-12 to +12)" Name="MakeLocalTime.UTC_Offset"/>
			pRetTime 	: ^CHAR;			//! <Variable Comment="Pointer to a String for the calculated timestamp&#13;&#10;Format: &quot;2017-10-01 08:00:00&quot;" Name="MakeLocalTime.pRetTime"/>
		END_VAR;
				//! <Function Comment="decoding the element &lt;symbol&gt; attribute var into a integer code&#13;&#10;example: &#13;&#10;var &quot;02n&quot; (02 night) --&gt; Code 1002&#13;&#10;var &quot;02d&quot; (02 day)  --&gt; Code 2002&#13;&#10;var &quot;10n&quot; (02 night) --&gt; Code 1010&#13;&#10;var &quot;10d&quot; (02 day)  --&gt; Code 2010&#13;&#10;" Name="MakeSymbolCode"/>
	FUNCTION MakeSymbolCode
		VAR_INPUT
			pSymbolTxt 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			SymbolCode 	: INT;
		END_VAR;
				//! <Function Comment="get a specific Day and month the weather data array&#13;&#10;format: &quot;DD.MM&quot;" Name="GetDayMonthWD"/>
	FUNCTION GetDayMonthWD
		VAR_INPUT
			DayOffset 	: DINT;			//! <Variable Comment="day-offset for searching the code&#13;&#10;0 = Day 1 (today)&#13;&#10;1 = Day 2 (tomorrow)&#13;&#10;2 = Day 3 ..." Name="GetDayMonthWD.DayOffset"/>
			pData 	: ^CHAR;			//! <Variable Comment="pointer to a string for saving the return string" Name="GetDayMonthWD.pData"/>
		END_VAR;
				//! <Function Comment="get a specific symbol code from the weather data array" Name="GetSymbolCodeWD"/>
	FUNCTION GetSymbolCodeWD
		VAR_INPUT
			Hour 	: DINT;			//! <Variable Comment="hour of the day for searching the code" Name="GetSymbolCodeWD.Hour"/>
			DayOffset 	: DINT;			//! <Variable Comment="day-offset for searching the code&#13;&#10;0 = Day 1 (today)&#13;&#10;1 = Day 2 (tomorrow)&#13;&#10;2 = Day 3 ..." Name="GetSymbolCodeWD.DayOffset"/>
		END_VAR
		VAR_OUTPUT
			RetValue 	: DINT;			//! <Variable Comment="return code" Name="GetSymbolCodeWD.RetValue"/>
		END_VAR;
				//! <Function Comment="get a specific weather code from the weather data array &#13;&#10;(= array item symbol number)" Name="GetWeatherCodeWD"/>
	FUNCTION GetWeatherCodeWD
		VAR_INPUT
			Hour 	: DINT;			//! <Variable Comment="hour of the day for searching the code" Name="GetWeatherCodeWD.Hour"/>
			DayOffset 	: DINT;			//! <Variable Comment="day-offset for searching the code" Name="GetWeatherCodeWD.DayOffset"/>
		END_VAR
		VAR_OUTPUT
			RetValue 	: DINT;			//! <Variable Comment="return code" Name="GetWeatherCodeWD.RetValue"/>
		END_VAR;
				//! <Function Comment="get the minimum temperature of a day from the weather data array &#13;&#10;" Name="GetTempMinWD"/>
	FUNCTION GetTempMinWD
		VAR_INPUT
			DayOffset 	: DINT;			//! <Variable Comment="day-offset for searching the value" Name="GetTempMinWD.DayOffset"/>
		END_VAR
		VAR_OUTPUT
			RetValue 	: DINT;			//! <Variable Comment="return value" Name="GetTempMinWD.RetValue"/>
		END_VAR;
				//! <Function Comment="get the maximum temperature of a day from the weather data array " Name="GetTempMaxWD"/>
	FUNCTION GetTempMaxWD
		VAR_INPUT
			DayOffset 	: DINT;			//! <Variable Comment="day-offset for searching the value" Name="GetTempMaxWD.DayOffset"/>
		END_VAR
		VAR_OUTPUT
			RetValue 	: DINT;			//! <Variable Comment="return value" Name="GetTempMaxWD.RetValue"/>
		END_VAR;
				//! <Function Comment="Check if the URL string has changed" Name="ChkURLchanged"/>
	FUNCTION ChkURLchanged
		VAR_OUTPUT
			result 	: DINT;			//! <Variable Comment="0 = URL has not been changed&#13;&#10;1 = URL has been changed" Name="ChkURLchanged.result"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Status::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherURL::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherURL::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Reset_URL::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyIsUsed::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyAddress::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyAddress::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyPort::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyPort::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyUser::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyUser::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyPassword::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProxyPassword::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherUserID::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherUserID::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocMode::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocID::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocID::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocName::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocName::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocCountry::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WeatherLocCountry::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LastLocationName::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LastLocationName::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day1_DD_MM::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day1_DD_MM::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day2_DD_MM::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day2_DD_MM::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day3_DD_MM::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day3_DD_MM::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day4_DD_MM::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day4_DD_MM::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day5_DD_MM::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day5_DD_MM::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using StringRAM
#pragma usingLtd _FileSys
#pragma usingLtd _MultiTask
#pragma usingLtd _OSKernel
#pragma usingLtd _XMLReader
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _WeatherForecast::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__WEATHERFORECAST
1$UINT, 1$UINT, (SIZEOF(::_WeatherForecast))$UINT, 
49$UINT, 22$UINT, 0$UINT, 
TO_UDINT(3839744317), "_WeatherForecast", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_WeatherForecast.Status.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2348327578), "Status", 
(::_WeatherForecast.AutoUpdate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(268938016), "AutoUpdate", 
(::_WeatherForecast.WeatherURL.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2439445247), "WeatherURL", 
(::_WeatherForecast.Reset_URL.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1427468779), "Reset_URL", 
(::_WeatherForecast.ProxyIsUsed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2786004339), "ProxyIsUsed", 
(::_WeatherForecast.ProxyAddress.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(608821709), "ProxyAddress", 
(::_WeatherForecast.ProxyPort.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2961566903), "ProxyPort", 
(::_WeatherForecast.ProxyUser.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2122802994), "ProxyUser", 
(::_WeatherForecast.ProxyPassword.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(1911516200), "ProxyPassword", 
(::_WeatherForecast.WeatherUserID.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(1946275093), "WeatherUserID", 
(::_WeatherForecast.WeatherLocMode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3170396818), "WeatherLocMode", 
(::_WeatherForecast.WeatherLocID.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(457189792), "WeatherLocID", 
(::_WeatherForecast.WeatherLocName.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(1964069695), "WeatherLocName", 
(::_WeatherForecast.WeatherLocCountry.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(110321335), "WeatherLocCountry", 
(::_WeatherForecast.LastUpdateTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1155791098), "LastUpdateTime", 
(::_WeatherForecast.LastLocationName.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(415440453), "LastLocationName", 
(::_WeatherForecast.Day1_DD_MM.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2546495690), "Day1_DD_MM", 
(::_WeatherForecast.Day1SymbolCode0.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1626370158), "Day1SymbolCode0", 
(::_WeatherForecast.Day1WeatherCode0.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(705807736), "Day1WeatherCode0", 
(::_WeatherForecast.Day1SymbolCode3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4193853908), "Day1SymbolCode3", 
(::_WeatherForecast.Day1WeatherCode3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3004732610), "Day1WeatherCode3", 
(::_WeatherForecast.Day1ActTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3622238694), "Day1ActTemperature", 
(::_WeatherForecast.Day1MinTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(560139120), "Day1MinTemperature", 
(::_WeatherForecast.Day1MaxTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2554695681), "Day1MaxTemperature", 
(::_WeatherForecast.Day1WindSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3272094971), "Day1WindSpeed", 
(::_WeatherForecast.Day1WindDegree.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3803193308), "Day1WindDegree", 
(::_WeatherForecast.Day1Pressure.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3749910174), "Day1Pressure", 
(::_WeatherForecast.Day1Humidity.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3922772283), "Day1Humidity", 
(::_WeatherForecast.Day1Cloudcover.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1162812593), "Day1Cloudcover", 
(::_WeatherForecast.Day2_DD_MM.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2787142231), "Day2_DD_MM", 
(::_WeatherForecast.Day2SymbolCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3598101896), "Day2SymbolCode", 
(::_WeatherForecast.Day2WeatherCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(102387229), "Day2WeatherCode", 
(::_WeatherForecast.Day2MinTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(807297289), "Day2MinTemperature", 
(::_WeatherForecast.Day2MaxTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2302212728), "Day2MaxTemperature", 
(::_WeatherForecast.Day3_DD_MM.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(5726691), "Day3_DD_MM", 
(::_WeatherForecast.Day3SymbolCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(402158152), "Day3SymbolCode", 
(::_WeatherForecast.Day3WeatherCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2646540914), "Day3WeatherCode", 
(::_WeatherForecast.Day3MinTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2313534177), "Day3MinTemperature", 
(::_WeatherForecast.Day3MaxTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(818094480), "Day3MaxTemperature", 
(::_WeatherForecast.Day4_DD_MM.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(3320864621), "Day4_DD_MM", 
(::_WeatherForecast.Day4SymbolCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1052993483), "Day4SymbolCode", 
(::_WeatherForecast.Day4WeatherCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3911707645), "Day4WeatherCode", 
(::_WeatherForecast.Day4MinTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(316978683), "Day4MinTemperature", 
(::_WeatherForecast.Day4MaxTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2881629834), "Day4MaxTemperature", 
(::_WeatherForecast.Day5_DD_MM.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(1669813465), "Day5_DD_MM", 
(::_WeatherForecast.Day5SymbolCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4283283467), "Day5SymbolCode", 
(::_WeatherForecast.Day5WeatherCode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1921165202), "Day5WeatherCode", 
(::_WeatherForecast.Day5MinTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2870963731), "Day5MinTemperature", 
(::_WeatherForecast.Day5MaxTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(305788258), "Day5MaxTemperature", 
//Clients:
(::_WeatherForecast._OSKernel.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3045737964), "_OSKernel", TO_UDINT(3045737964), "_OSKernel", 0$UINT, 4$UINT, 
(::_WeatherForecast.SDT_SysTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2155407840), "SDT_SysTime", 
(::_WeatherForecast.UTC_Offset.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4189504933), "UTC_Offset", 
(::_WeatherForecast._MultiTask.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2641766936), "_MultiTask", TO_UDINT(2641766936), "_MultiTask", 1$UINT, 1$UINT, 
(::_WeatherForecast.Str_WeatherURL.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(168342942), "Str_WeatherURL", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_ProxyPort.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3121102199), "Str_ProxyPort", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_ProxyUser.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1946859250), "Str_ProxyUser", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_ProxyPassword.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3843150385), "Str_ProxyPassword", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_WeatherUserID.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3774837516), "Str_WeatherUserID", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_WeatherLocName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(300811585), "Str_WeatherLocName", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_WeatherLocCountry.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2568949462), "Str_WeatherLocCountry", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_WeatherLocID.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2177217577), "Str_WeatherLocID", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_ProxyAddress.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3201072196), "Str_ProxyAddress", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast._FileSys.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(545279513), "_FileSys", TO_UDINT(545279513), "_FileSys", 1$UINT, 19$UINT, 
(::_WeatherForecast.SigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(77440046), "SigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 23$UINT, 
(::_WeatherForecast._XMLReader.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3727258101), "_XMLReader", TO_UDINT(3727258101), "_XMLReader", 1$UINT, 4$UINT, 
(::_WeatherForecast.Str_Day1_DD_MM.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(212221867), "Str_Day1_DD_MM", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_Day2_DD_MM.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1028531510), "Str_Day2_DD_MM", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_Day3_DD_MM.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2604215938), "Str_Day3_DD_MM", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_Day4_DD_MM.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1587417100), "Str_Day4_DD_MM", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_Day5_DD_MM.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4176026552), "Str_Day5_DD_MM", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_WeatherForecast.Str_LastLocationName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(729274883), "Str_LastLocationName", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT__WeatherForecast 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__WeatherForecast] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _WeatherForecast::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__WeatherForecast, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	Status.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Status.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AutoUpdate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF AutoUpdate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WeatherURL.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WeatherURL::Read();
	vmt.CmdTable.Write		:= #WeatherURL::Write();
	WeatherURL.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WeatherURL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Reset_URL.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Reset_URL::Write() );
	IF Reset_URL.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ProxyIsUsed.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ProxyIsUsed::Write() );
	IF ProxyIsUsed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, ProxyAddress.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #ProxyAddress::Read();
	vmt.CmdTable.Write		:= #ProxyAddress::Write();
	ProxyAddress.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ProxyAddress.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, ProxyPort.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #ProxyPort::Read();
	vmt.CmdTable.Write		:= #ProxyPort::Write();
	ProxyPort.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ProxyPort.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, ProxyUser.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #ProxyUser::Read();
	vmt.CmdTable.Write		:= #ProxyUser::Write();
	ProxyUser.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ProxyUser.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, ProxyPassword.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #ProxyPassword::Read();
	vmt.CmdTable.Write		:= #ProxyPassword::Write();
	ProxyPassword.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ProxyPassword.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WeatherUserID.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WeatherUserID::Read();
	vmt.CmdTable.Write		:= #WeatherUserID::Write();
	WeatherUserID.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WeatherUserID.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	WeatherLocMode.pMeth			:= StoreMethod( #M_RD_DIRECT(), #WeatherLocMode::Write() );
	IF WeatherLocMode.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WeatherLocID.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WeatherLocID::Read();
	vmt.CmdTable.Write		:= #WeatherLocID::Write();
	WeatherLocID.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WeatherLocID.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WeatherLocName.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WeatherLocName::Read();
	vmt.CmdTable.Write		:= #WeatherLocName::Write();
	WeatherLocName.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WeatherLocName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WeatherLocCountry.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WeatherLocCountry::Read();
	vmt.CmdTable.Write		:= #WeatherLocCountry::Write();
	WeatherLocCountry.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WeatherLocCountry.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, LastLocationName.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #LastLocationName::Read();
	vmt.CmdTable.Write		:= #LastLocationName::Write();
	LastLocationName.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF LastLocationName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, Day1_DD_MM.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #Day1_DD_MM::Read();
	vmt.CmdTable.Write		:= #Day1_DD_MM::Write();
	Day1_DD_MM.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Day1_DD_MM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, Day2_DD_MM.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #Day2_DD_MM::Read();
	vmt.CmdTable.Write		:= #Day2_DD_MM::Write();
	Day2_DD_MM.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Day2_DD_MM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, Day3_DD_MM.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #Day3_DD_MM::Read();
	vmt.CmdTable.Write		:= #Day3_DD_MM::Write();
	Day3_DD_MM.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Day3_DD_MM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, Day4_DD_MM.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #Day4_DD_MM::Read();
	vmt.CmdTable.Write		:= #Day4_DD_MM::Write();
	Day4_DD_MM.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Day4_DD_MM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, Day5_DD_MM.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #Day5_DD_MM::Read();
	vmt.CmdTable.Write		:= #Day5_DD_MM::Write();
	Day5_DD_MM.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Day5_DD_MM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL _WeatherForecast::Init
  VAR
    retv    :  SYS_ERROR;	
  END_VAR

  if (_firstscan) then

    //---------------------------------------------------------------------------------------------
    // set the URL
    //---------------------------------------------------------------------------------------------
    if (Str_WeatherURL.GetLength() <= 4) then
      SetWeatherURL();
    end_if;    

    //---------------------------------------------------------------------------------------------
    // init the HTTP Client
    //---------------------------------------------------------------------------------------------
    _OSKernel.AddToServiceProvider(command:="EXEC HTTPCLIENT INIT", immediatly:=1); 
  
    retv := OS_CILGET("HTTPCLIENT", #pHTTPCli$void);
    
    if (retv <> SYS_ERR_NONE) then
      Status := -2;
    else
      Status := 0;
      
      //---------------------------------------------------------------------------------------
      // set proxy settings
      //---------------------------------------------------------------------------------------
      SetOptions();
      
    end_if;
    
    //---------------------------------------------------------------------------------------------
    // more INITs
    //---------------------------------------------------------------------------------------------
    firstAutoUpdate := 1;   // set flag to get AutoUpdate data after program start


    //---------------------------------------------------------------------------------------------
    // create the thread
    //---------------------------------------------------------------------------------------------
    _MultiTask.CREATETHREAD(taskfunction0:=#ParallelTask(), 
                            priority0:=9, 
                            stackSize0:=16#4000, 
                            flags0:=MT_TASK_SAVETHIS, 
                            parameter0:=this, 
                            name0:="WeatherThread");

    //---------------------------------------------------------------------------------------------
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  //===============================================================================================
  // cyclic work
  //===============================================================================================
  if (Status <> -2) then

    CyclicWork();

  end_if;

	state := READY;

END_FUNCTION


FUNCTION GLOBAL _WeatherForecast::ParallelTask

  //===============================================================================================
  // cyclic work
  //===============================================================================================
  while (1) do
   
    if (Status <> -2) then

      CyclicWork();

    end_if;
    
    _MultiTask.TASKDELAY(100);

  end_while;

END_FUNCTION


FUNCTION GLOBAL _WeatherForecast::CyclicWork


  //-----------------------------------------------------------------------------------------------
  // get data via automatically updates 
  //-----------------------------------------------------------------------------------------------
  if (AutoUpdate > 0) then

    if ( ((ops.tAbsolute - TmAutoUpdate)/1000) >= (AutoUpdate*60) | (firstAutoUpdate = 1) ) then
      firstAutoUpdate := 0;
      TmAutoUpdate := ops.tAbsolute;

      SetWeatherURL();      // in auto-update mode also set the URL automatically
      GetDataOverHttp();    // get the weatherdata ...

    end_if;
  
  else
    TmAutoUpdate := ops.tAbsolute;
  end_if;

  //-----------------------------------------------------------------------------------------------
  // get data via manual command
  //-----------------------------------------------------------------------------------------------
  if (GetHttpData = TRUE) then
    GetDataOverHttp();
    GetHttpData := FALSE;
  end_if;
  
  //-----------------------------------------------------------------------------------------------
  // set proxy via manual command
  //-----------------------------------------------------------------------------------------------
  if (SetProxy = TRUE) then
    SetOptions();
    SetProxy := FALSE;
  end_if;

  //-----------------------------------------------------------------------------------------------
  // async file handling and decoding
  //-----------------------------------------------------------------------------------------------
  XmlFileHandling();
  DecodeXmlData();

  //-----------------------------------------------------------------------------------------------


END_FUNCTION


FUNCTION GLOBAL _WeatherForecast::SetWeatherURL
	VAR_OUTPUT
		udlen 	: UDINT;
	END_VAR
	VAR
		len : UDINT;
	END_VAR

  //-----------------------------------------------------------------------------------------------
  // 1: start with part 1 of the URL
  //-----------------------------------------------------------------------------------------------
  SigCLib.StrCpy(dst0:=#URL_String[0], src0:=WEATHERFC_DEF_URL_P1);

  //-----------------------------------------------------------------------------------------------
  // 2a: add location using type "Location per Name+Country"
  //-----------------------------------------------------------------------------------------------
  if (WeatherLocMode = 1) then

    SigCLib.StrCat(ps1:=#URL_String[0], ps2:="q=");

    len := Str_WeatherLocName.GetLength();
    if (Len >= sizeof(tmpTxt))  then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_WeatherLocName.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=len);
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:=#tmpTxt[0]);

    SigCLib.StrCat(ps1:=#URL_String[0], ps2:=",");

    len := Str_WeatherLocCountry.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_WeatherLocCountry.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len);
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:=#tmpTxt[0]);

  //-----------------------------------------------------------------------------------------------
  // 2b: add location using type "Location per ID"
  //-----------------------------------------------------------------------------------------------
  else
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:="id=");

    len := Str_WeatherLocID.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_WeatherLocID.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len);
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:=#tmpTxt[0]);

  end_if;

  //-----------------------------------------------------------------------------------------------
  // 3: add user-ID
  //-----------------------------------------------------------------------------------------------
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:="&APPID=");

    len := Str_WeatherUserID.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_WeatherUserID.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len);
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:=#tmpTxt[0]);

  //-----------------------------------------------------------------------------------------------
  // 4: add part 2 of the URL
  //-----------------------------------------------------------------------------------------------
    SigCLib.StrCat(ps1:=#URL_String[0], ps2:="&units=metric&mode=xml");

  //-----------------------------------------------------------------------------------------------
  // return the length and write string to the class server
  //-----------------------------------------------------------------------------------------------
  udlen := SigCLib.StrLen(str:=#URL_String[0]);

  Str_WeatherURL.WriteDataOff(udLen:=udlen, udOff:=0, pData:=#URL_String[0]);

  //-----------------------------------------------------------------------------------------------

END_FUNCTION


FUNCTION GLOBAL _WeatherForecast::SetOptions
  VAR
  	len       : UDINT;
    retcode   : DINT;
    myVal     : INT;
  END_VAR

  //-----------------------------------------------------------------------------------------------
  // set TimeOut  !! don't know if this works at all ... !!
  //-----------------------------------------------------------------------------------------------
  myVal := 15;
  len := 2;
  retcode := pHTTPCli^.HTTPSetOption $ G_HTTPSetOption( udOption:=HTTPCLIENT_OPT_TIMEOUT, 
                                                        optVal:=#myVal, 
                                                        optValLen:=#len);    


  //-----------------------------------------------------------------------------------------------
  // create proxy string (has to be "http://user:password@hostname.com:port")
  //-----------------------------------------------------------------------------------------------
  if (ProxyIsUsed = TRUE) then
  
    SigCLib.StrCpy(dst0:=#ProxyString[0], src0:= "http://");                 // add first part
    
    len := Str_ProxyUser.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_ProxyUser.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len);     // add User
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:=#tmpTxt[0]);
    
    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:=":");                        // add colon to string
    
    len := Str_ProxyPassword.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_ProxyPassword.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len); // add password
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:=#tmpTxt[0]);

    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:="@");                        // add "at" to string

    len := Str_ProxyAddress.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_ProxyAddress.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len);  // add proxy address
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:=#tmpTxt[0]);

    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:=":");                        // add colon to string

    len := Str_ProxyPort.GetLength();
    if (Len >= sizeof(tmpTxt)) then
      Len := sizeof(tmpTxt) -1;
    end_if;
    Str_ProxyPort.ReadDataOff(udOff:=0, pData:=#tmpTxt[0], udMax:=Len);     // proxy port
    tmpTxt[len] := 0;
    SigCLib.StrCat(ps1:=#ProxyString[0], ps2:=#tmpTxt[0]);

    len:= SigCLib.StrLen(#ProxyString[0]);
    
    //-------------------------------------------------------------------------------------------
    // set proxy string
    //-------------------------------------------------------------------------------------------
    retcode := pHTTPCli^.HTTPSetOption $ G_HTTPSetOption( udOption:=HTTPCLIENT_OPT_PROXY, 
                                                          optVal:=#ProxyString[0], 
                                                          optValLen:= #len);    
  
  
  //-----------------------------------------------------------------------------------------------
  // if no proxy used, create an empty string
  //-----------------------------------------------------------------------------------------------
  else
  
    ProxyString[0] := 0;
    len := 1;
    retcode := pHTTPCli^.HTTPSetOption $ G_HTTPSetOption( udOption:=HTTPCLIENT_OPT_PROXY, 
                                                          optVal:=#ProxyString[0], 
                                                          optValLen:= #len);
    
  end_if;

  //-----------------------------------------------------------------------------------------------

END_FUNCTION


FUNCTION GLOBAL _WeatherForecast::GetDataOverHttp

  VAR
  	len    : UDINT;
  END_VAR

  if (status <> NEW_DATA_IN_PROCESS) then

    //-----------------------------------------------------------------------------------------------
    // get the URL
    //-----------------------------------------------------------------------------------------------
    if (Str_WeatherURL.GetLength() <= 4) then
      SetWeatherURL();
    end_if;    
    len := Str_WeatherURL.GetLength();
    if (Len >= sizeof(URL_String)) then
      Len := sizeof(URL_String) -1;
    end_if;
    Str_WeatherURL.ReadDataOff(udOff:=0, pData:=#URL_String[0], udMax:=Len);
    URL_String[len] := 0;

    //-----------------------------------------------------------------------------------------------
    // send HTTP get request
    //-----------------------------------------------------------------------------------------------
    Status := 0;
    
    pHTTPCli^.HTTPGet $ G_HTTPGet(#URL_String[0], #HTTP_Buffer[0], sizeof(HTTP_Buffer), #Status);
    if (Status = HTTP_REQUEST_OK) then

      File_LastError := 0;
      File_Step := FILE_START_WRITE;    // start saving the data into xml file
      DecodeXmlStep := DC_START;        // start the decoding

    elsif (Status = 0) then
      Status := -4;
    end_if;

  end_if;

END_FUNCTION


FUNCTION _WeatherForecast::DecodeXmlData

  VAR
  	pEL_BLOCK     : ^_XML_ELEMENT;
  	pEL_CHILD     : ^_XML_ELEMENT;
    pStr          : ^USINT;
    myWeather     : t_e_WeatherData;
    done          : BOOL;
    floatVal      : REAL;
    pos           : UDINT;
    myTxt1        : ARRAY [0..20] OF USINT;
    myTxt2        : ARRAY [0..20] OF USINT;
    i             : DINT;
    VwStepTimeOut : UDINT;
  END_VAR

  //=========================================================================================================
  // TIMEOUT DECODE-STEP
  //=========================================================================================================
  VwStepTimeOut := 20;              // set max Time for TimeOut [sec]
  if (DecodeXmlStep = DC_IDLE) then
    Decode_TimeStampIDLE := ops.tAbsolute;
  elsif ((ops.tAbsolute - Decode_TimeStampIDLE) > VwStepTimeOut*1000) then
    DecodeXmlStep := DC_END;
  end_if;


  //=========================================================================================================
  // DECODE STEPS
  //=========================================================================================================
  case (DecodeXmlStep) of

  	//=======================================================================================================
    // IDLE ... no action
  	//-------------------------------------------------------------------------------------------------------
  	DC_IDLE:

  	//=======================================================================================================
    // START ... start the decoding process 
  	//-------------------------------------------------------------------------------------------------------
  	DC_START:

      Status := NEW_DATA_IN_PROCESS;        // set the status temporarily to "new data will be processed"

      LastUpdateTime := SDT_SysTime.Read(); // save the update time

      UTC_Offset := UTC_Offset.Read();      // check the limits the UTC offset
      if (UTC_Offset < -12) then
        UTC_Offset := -12;
      elsif (UTC_Offset > 12) then
        UTC_Offset := 12;
      end_if;

      DecodeXmlStep := DC_WaitForFile;

  	//=======================================================================================================
    // WaitForFile ... wait until XML-file is saved
  	//-------------------------------------------------------------------------------------------------------
  	DC_WaitForFile:

      if (File_Step = FILE_IDLE) then
        if (File_LastError = 0) then
          DecodeXmlStep := DC_XmlReadFile;
        else
          DecodeXmlStep := DC_IDLE;
          if (File_LastError = -5) then
            Status := -1;     // -1 = Not enough Data transmitted
          else        
            Status := -5;     // -5 = error writing XML file
          end_if;
        end_if;
      end_if;

  	//=======================================================================================================
    // XmlReadFile ... command to XML-Reader "read the XML file"
  	//-------------------------------------------------------------------------------------------------------
  	DC_XmlReadFile:

      _XMLReader.FreeReader();
      _XMLReader.ReadFile(FileName:=#File_DPNE1[0]);
      DecodeXmlStep := DC_XmlReadFile_Wait;

  	//=======================================================================================================
    // XmlReadFile_Wait ... wait after command to XML-Reader "read the XML file"
  	//-------------------------------------------------------------------------------------------------------
  	DC_XmlReadFile_Wait:

      if (_XMLReader.GetXmlState() = _XMLReader::_STRUCT_CREATED) then
        DecodeXmlStep := DC_XmlGetDataStart;
      elsif (_XMLReader.GetXmlState() = _XMLReader::_ERROR) then
        DecodeXmlStep := DC_IDLE;
        Status := -6;       // -6 = error reading XML file
      end_if;

  	//=======================================================================================================
    // XmlGetDataStart ... get the start point of the data (xml-element pointer)
  	//-------------------------------------------------------------------------------------------------------
  	DC_XmlGetDataStart:

      //-------------------------------------------------------------------------------------------
      // at first get the "real" location name out of the xml
      //-------------------------------------------------------------------------------------------
      pEL_START := _XMLReader.GetElementByName(pName:="weatherdata");
      if (pEL_START = NIL) then
        Status := -7;       // -7 = wrong XML format
        DecodeXmlStep := DC_IDLE;
      else
        pEL_BLOCK := _XMLReader.GetChildByName(pParent:=pEL_START, pName:="location", number:=1);
        if (pEL_BLOCK = NIL) then
          Status := -7;     // -7 = wrong XML format
          DecodeXmlStep := DC_IDLE;
        else
          pEL_BLOCK := _XMLReader.GetChildByName(pParent:=pEL_BLOCK, pName:="name", number:=1);
          if (pEL_BLOCK = NIL) then
            Status := -7;     // -7 = wrong XML format
            DecodeXmlStep := DC_IDLE;
          else
            pStr := pEL_BLOCK^.pText;
            if (pStr <> NIL) then

              Str_LastLocationName.WriteDataOff(udLen:=SigCLib.StrLen(pStr), udOff:=0, pData:=pStr);

            end_if;   // (ask for attribute "name")
          end_if;   // (ask for element "name")
        end_if;   // (ask for element "location")
      end_if;   // (ask for element "weatherdata")

      pEL_START := _XMLReader.GetElementByName(pName:="forecast");
      if (pEL_START = NIL) then
        Status := -7;       // -7 = wrong XML format
        DecodeXmlStep := DC_IDLE;
      else
        DecodeXmlStep := DC_XmlGetData;
      end_if;

  	//=======================================================================================================
    // XmlGetData ... get the new xml-weatherdata
  	//-------------------------------------------------------------------------------------------------------
  	DC_XmlGetData:

      done := FALSE;
      pos  := 1;

      SigCLib.MemSet(dst:=#WeatherData, c:=0, len:=sizeof(WeatherData));  // clear complete weatherdata

      while (done = FALSE) do
      
        SigCLib.MemSet(dst:=#myWeather, c:=0, len:=sizeof(t_e_WeatherData));  // clear my datablock

        pEL_BLOCK := _XMLReader.GetChildByName(pParent:=pEL_START, pName:="time", number:=pos);
        if (pEL_BLOCK = NIL) then
          if (pos <= (WEATHERFC_XmlEntries/5*4 )) then  // it's possible to get less than expected entries!
            Status := -7;                               // -7 = wrong XML format
          end_if;
          done := TRUE;
          DecodeXmlStep := DC_END;

        else
          pStr := _XMLReader.GetAttribValueByName(pElement:=pEL_BLOCK, pName:="from");
          if (pStr <> NIL) then
            SigCLib.StrNCpy(#myWeather.DateStamp[0], pStr, 10);                       // --> DateStamp
            myWeather.fromHH := TO_USINT(CharToDint((pStr+11), 2));                   // --> HH (ascii -> Dint)

            SigCLib.StrNCpy(#myTxt1[0], pStr, 19);
            MakeLocalTime(#myTxt1[0], UTC_Offset, #myTxt2[0]);
            SigCLib.StrNCpy(#myWeather.LocalTime_DateStamp[0], #myTxt2[0], 10);       // --> Local Time DateStamp
            myWeather.LocalTime_fromHH := TO_USINT(CharToDint(#myTxt2[11], 2));       // --> Local Time HH (ascii -> Dint)

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "symbol", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "var");
            myWeather.SymbolCode := MakeSymbolCode(pSymbolTxt:=pStr);                 // --> Sympol code

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "symbol", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "number");
            myWeather.SymbolNumber := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr))); // --> Sympol number (fine weather code)

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "windDirection", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "deg");
            myWeather.WindDir_deg := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr)));  // --> Wind direction degree

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "windSpeed", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "mps");
            floatVal := SigCLib.AToF(pStr) * 3.6;
            myWeather.WindSpeed_kmh := TO_INT(floatVal);                              // --> Wind speed km/h

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "temperature", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "value");
            myWeather.TempAct_C := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr)));    // --> Temperature actual

            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "min");
            myWeather.TempMin_C := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr)));    // --> Temperature minimum

            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "max");
            myWeather.TempMax_C := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr)));    // --> Temperature maximum

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "pressure", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "value");
            myWeather.Pressure_hPa := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr))); // --> Pressure actual

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "humidity", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "value");
            myWeather.humidity_pct := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr))); // --> Humidity in %

            pEL_CHILD := _XMLReader.GetChildByName(pEL_BLOCK, "clouds", 1);
            pStr := _XMLReader.GetAttribValueByName(pEL_CHILD, "all");
            myWeather.clouds_pct := TO_INT(CharToDint(pStr, SigCLib.StrLen(pStr)));   // --> Clouds in %

          end_if;   // (ask for attribute "from")

        end_if;   // (ask for element "time")

        WeatherData[pos-1] := myWeather;        // save the data block into array

        pos += 1;                               // next "time" element
        if (pos > WEATHERFC_XmlEntries) then
          done := TRUE;                         // escape cause all is done
        end_if;

      end_while;

      DecodeXmlStep := DC_XmlWorkData;

  	//=======================================================================================================
    // XmlWorkData ... work with the new XML-data
  	//-------------------------------------------------------------------------------------------------------
  	DC_XmlWorkData:

      //-------------------------------------------------------------------------------------------
      // check for day changement
      //-------------------------------------------------------------------------------------------
      if (ActDay <> CharToDint(#WeatherData[0].LocalTime_DateStamp[8], 2)) then
        ActDay := CharToDint(#WeatherData[0].LocalTime_DateStamp[8], 2);

        // init todays min and max temperatures 
        TodayTempMin := WeatherData[0].TempMin_C;
        TodayTempMax := WeatherData[0].TempMax_C;
      
      end_if;

      //-------------------------------------------------------------------------------------------
      // check for URL changement (this can be because of another location ...)
      //-------------------------------------------------------------------------------------------
      if (ChkURLchanged() = 1) then

        // init todays min and max temperatures 
        TodayTempMin := WeatherData[0].TempMin_C;
        TodayTempMax := WeatherData[0].TempMax_C;
      
      end_if;

      //-------------------------------------------------------------------------------------------
      // calculate todays min and max temperatures 
      // (because later the old datablocks of today are not available anymore)
      //-------------------------------------------------------------------------------------------
      for i:=0 to (WEATHERFC_XmlEntries -1)  do
      
        if (ActDay = CharToDint(#WeatherData[i].LocalTime_DateStamp[8], 2)) then

          if (WeatherData[i].TempMin_C < TodayTempMin) then
            TodayTempMin := WeatherData[i].TempMin_C;
          end_if;
          if (WeatherData[i].TempMax_C > TodayTempMax) then
            TodayTempMax := WeatherData[i].TempMax_C;
          end_if;

        end_if;
      end_for;

      //-------------------------------------------------------------------------------------------
      // write the class servers for weather data
      //-------------------------------------------------------------------------------------------
      GetDayMonthWD(DayOffset:=0, pData:=#tmpTxt[0]);
      Str_Day1_DD_MM.WriteDataOff(udLen:=5, udOff:=0, pData:=#tmpTxt[0]);
      Day1SymbolCode0    := WeatherData[0].SymbolCode;
      Day1WeatherCode0   := WeatherData[0].SymbolNumber;
      Day1SymbolCode3    := WeatherData[1].SymbolCode;
      Day1WeatherCode3   := WeatherData[1].SymbolNumber;
      Day1ActTemperature := WeatherData[0].TempAct_C;
      Day1MinTemperature := TodayTempMin;
      Day1MaxTemperature := TodayTempMax;
      Day1WindSpeed      := WeatherData[0].WindSpeed_kmh;
      Day1WindDegree     := WeatherData[0].WindDir_deg;
      Day1Pressure       := WeatherData[0].Pressure_hPa;
      Day1Humidity       := WeatherData[0].humidity_pct;
      Day1Cloudcover     := WeatherData[0].clouds_pct;

      GetDayMonthWD(DayOffset:=1, pData:=#tmpTxt[0]);
      Str_Day2_DD_MM.WriteDataOff(udLen:=5, udOff:=0, pData:=#tmpTxt[0]);
      Day2SymbolCode     := GetSymbolCodeWD(Hour:=12, DayOffset:=1);
      Day2WeatherCode    := GetWeatherCodeWD(Hour:=12, DayOffset:=1);
      Day2MinTemperature := GetTempMinWD(DayOffset:=1);
      Day2MaxTemperature := GetTempMaxWD(DayOffset:=1);

      GetDayMonthWD(DayOffset:=2, pData:=#tmpTxt[0]);
      Str_Day3_DD_MM.WriteDataOff(udLen:=5, udOff:=0, pData:=#tmpTxt[0]);
      Day3SymbolCode     := GetSymbolCodeWD(Hour:=12, DayOffset:=2);
      Day3WeatherCode    := GetWeatherCodeWD(Hour:=12, DayOffset:=2);;
      Day3MinTemperature := GetTempMinWD(DayOffset:=2);
      Day3MaxTemperature := GetTempMaxWD(DayOffset:=2);

      GetDayMonthWD(DayOffset:=3, pData:=#tmpTxt[0]);
      Str_Day4_DD_MM.WriteDataOff(udLen:=5, udOff:=0, pData:=#tmpTxt[0]);
      Day4SymbolCode     := GetSymbolCodeWD(Hour:=12, DayOffset:=3);
      Day4WeatherCode    := GetWeatherCodeWD(Hour:=12, DayOffset:=3);;
      Day4MinTemperature := GetTempMinWD(DayOffset:=3);
      Day4MaxTemperature := GetTempMaxWD(DayOffset:=3);

      GetDayMonthWD(DayOffset:=4, pData:=#tmpTxt[0]);
      Str_Day5_DD_MM.WriteDataOff(udLen:=5, udOff:=0, pData:=#tmpTxt[0]);
      Day5SymbolCode     := GetSymbolCodeWD(Hour:=12, DayOffset:=4);
      Day5WeatherCode    := GetWeatherCodeWD(Hour:=12, DayOffset:=4);
      Day5MinTemperature := GetTempMinWD(DayOffset:=4);
      Day5MaxTemperature := GetTempMaxWD(DayOffset:=4);

      //-------------------------------------------------------------------------------------------
      DecodeXmlStep := DC_END;

  	//=======================================================================================================
    // END ... normal exit the decoding process 
  	//-------------------------------------------------------------------------------------------------------
  	DC_END:

      if (Status = NEW_DATA_IN_PROCESS) then
        Status := HTTP_REQUEST_OK;   // reset the status to the http return code "everything ok"
      end_if;
      DecodeXmlStep := DC_IDLE;

  	//=======================================================================================================

  end_case;

END_FUNCTION


FUNCTION _WeatherForecast::XmlFileHandling

  VAR
  	ret           : DINT;
    VwStepTimeOut : UDINT;
  END_VAR

  //=========================================================================================================
  // TIMEOUT FILE-STEP
  //=========================================================================================================
  VwStepTimeOut := 20;              // set max Time for TimeOut [sec]
  if (File_Step = FILE_IDLE) then
    File_TimeStampIDLE := ops.tAbsolute;
  elsif ((ops.tAbsolute - File_TimeStampIDLE) > VwStepTimeOut*1000) then
    File_Step := FILE_IDLE;
  end_if;


  //=========================================================================================================
  // ASYNC FILE HANDLING
  //=========================================================================================================
  case (File_Step) of

  	//=======================================================================================================
    // IDLE ... no File action
  	//-------------------------------------------------------------------------------------------------------
    FILE_IDLE:

      File_ActError  := 0;

  	//=======================================================================================================
    //  ERROR occurred in one of the steps
  	//-------------------------------------------------------------------------------------------------------
  	FILE_ERROR:

      File_LastError := File_ActError;
      File_Step := FILE_IDLE;


  	//=======================================================================================================
    // START READ
  	//-------------------------------------------------------------------------------------------------------
  	FILE_START_READ:

      File_Step := FILE_FCHECK_READ;

  	//=======================================================================================================
    // FILE CHECK for FILE READ
  	//-------------------------------------------------------------------------------------------------------
  	FILE_FCHECK_READ:

      File_Step     := FILE_FOPEN_READ;

  	//=======================================================================================================
    // FILE OPEN for FILE READ
  	//-------------------------------------------------------------------------------------------------------
  	FILE_FOPEN_READ:

      File_Step    := FILE_WAIT_FOPEN_READ;

  	//=======================================================================================================
    // WAIT FILE OPEN for FILE READ
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WAIT_FOPEN_READ:

      File_Step     := FILE_FLEN_READ;              

  	//=======================================================================================================
    // get FILE LENGTH for FILE READ
  	//-------------------------------------------------------------------------------------------------------
    FILE_FLEN_READ:

      File_Step     := FILE_WAIT_FLEN_READ;

  	//=======================================================================================================
    // WAIT get FILE LENGTH for FILE READ
  	//-------------------------------------------------------------------------------------------------------
    FILE_WAIT_FLEN_READ:

      File_Step     := FILE_FREAD;              

  	//=======================================================================================================
    // FILE READ
  	//-------------------------------------------------------------------------------------------------------
  	FILE_FREAD:

      File_Step     := FILE_WAIT_FREAD;

  	//=======================================================================================================
    // WAIT FILE READ
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WAIT_FREAD:

      File_Step     := FILE_CHECK_READDATA;              

  	//=======================================================================================================
    // CHECK the FILE READ data
  	//-------------------------------------------------------------------------------------------------------
  	FILE_CHECK_READDATA:

      File_Step     := FILE_WORK_READDATA;

  	//=======================================================================================================
    // WORK with the FILE READ data
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WORK_READDATA:

      File_Step     := FILE_FCLOSE;


  	//=======================================================================================================
    // START WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_START_WRITE:

      File_Step     := FILE_CHECK_WRITEDATA;

  	//=======================================================================================================
    // CHECK DATA for FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_CHECK_WRITEDATA:

      File_FileLen := SigCLib.StrLen(str:=#HTTP_Buffer[0]);  // length of received data
      if (File_FileLen < 1000) then
        File_ActError := -5;          // error length for filedata
        File_Step     := FILE_ERROR;
      else
        File_Step     := FILE_WORK_WRITEDATA;
      end_if;

  	//=======================================================================================================
    // WORK with DATA for FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WORK_WRITEDATA:

      // string with DIR name
      SigCLib.StrCpy(dst0:=#File_DPNE1[0], src0:="C:\");
      SigCLib.StrCat(ps1:=#File_DPNE1[0], ps2:=WEATHERFC_XmlFile);  // add filename

      // does the file exist?
      ret := _FileSys.RenameFile_Dir(actname:=#File_DPNE1[0], newname:=#File_DPNE1[0]);
      if ((ret = 0) | (ret = -36)) then // -36 RTF_FILE_EXISTS
        File_Step     := FILE_FDELETE_WRITE;
      else
        File_Step     := FILE_FOPEN_WRITE;
      end_if;  

  	//=======================================================================================================
    // FILE DELETE for FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
    FILE_FDELETE_WRITE:

      File_AsyncID := _FileSys.FileDelete_A(Async:=1, filename:=#File_DPNE1[0]);
      File_Step := FILE_WAIT_FDELETE_WRITE;

  	//=======================================================================================================
    // WAIT FILE DELETE for FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
    FILE_WAIT_FDELETE_WRITE:

      ret := _FileSys.GetAsyncState(ID:=TO_UDINT(File_AsyncID), Erg:=#dVar);

      case (ret) of
        0:
          if (dVar >= 0) then       // OK?
            File_Step   := FILE_FOPEN_WRITE;              

          elsif (dVar = -9) then   // -9 = RTF_FILE_NOT_FOUND (for DELETE)
            File_Step   := FILE_FOPEN_WRITE;              

          else
            File_ActError := -7;          // error file delete
            File_Step   := FILE_ERROR;
          end_if;  
        
        RT_NOT_STARTED,
        RT_IN_PROGRESS:
        
        else
          File_ActError := -7;          // error file delete
          File_Step     := FILE_ERROR;
      end_case;

  	//=======================================================================================================
    // FILE OPEN for FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_FOPEN_WRITE:

      File_AsyncID := _FileSys.FileOpen_A(Async:=1, FileName:=#File_DPNE1[0], attributes:=ATT_CREATE_ALWAYS);
      File_Step := FILE_WAIT_FOPEN_WRITE;

  	//=======================================================================================================
    // WAIT FILE OPEN for FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WAIT_FOPEN_WRITE:

      ret := _FileSys.GetAsyncState(ID:=TO_UDINT(File_AsyncID), Erg:=#File_FileHandle);

      case (ret) of
        0:
          if (File_FileHandle >= 0) then    // OK?
            File_Step     := FILE_FWRITE;              
          else
            File_ActError := -2;            // error file open
            File_Step     := FILE_ERROR;
          end_if;  
        
        RT_NOT_STARTED,
        RT_IN_PROGRESS:
        
        else
          File_ActError := -2;          // error file open
          File_Step     := FILE_ERROR;
      end_case;

  	//=======================================================================================================
    // FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_FWRITE:

      File_AsyncID  := _FileSys.FileWrite_A( Async:=1, handle:=File_FileHandle, 
                                            buffer:=#HTTP_Buffer[0], length:=File_FileLen);
      File_Step     := FILE_WAIT_FWRITE;

  	//=======================================================================================================
    // WAIT FILE WRITE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WAIT_FWRITE:

      ret := _FileSys.GetAsyncState(ID:=TO_UDINT(File_AsyncID), Erg:=#dVar);
      
      case (ret) of
        0:

          if (dVar = TO_DINT(File_FileLen)) then

            //-------------------------------------------------------------------------------------
            // all done
            //-------------------------------------------------------------------------------------
            File_Step     := FILE_FCLOSE;
            //-------------------------------------------------------------------------------------

          else
            File_ActError := -8;           // error file write
            File_Step     := FILE_ERROR;
          end_if;
      
        RT_NOT_STARTED,
        RT_IN_PROGRESS:
        
        else
          File_ActError := -8;             // error file write
          File_Step     := FILE_ERROR;
      end_case;


  	//=======================================================================================================
    // FILE CLOSE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_FCLOSE:

      File_AsyncID := _FileSys.FileClose_A(Async:=1, handle:=File_FileHandle);
      File_Step := FILE_WAIT_FCLOSE;

  	//=======================================================================================================
    // WAIT FILE CLOSE
  	//-------------------------------------------------------------------------------------------------------
  	FILE_WAIT_FCLOSE:

      ret := _FileSys.GetAsyncState(ID:=TO_UDINT(File_AsyncID), Erg:=#dVar);
      
      case (ret) of
        0:
          if (dVar >= 0) then
            if (File_ActError < 0) then   // is there a previous error?
              File_Step   := FILE_ERROR;
            else
              File_Step   := FILE_IDLE;
            end_if;
          else
            File_ActError := -10;         // error file close
            File_Step     := FILE_ERROR;
          end_if;  
        
        RT_NOT_STARTED,
        RT_IN_PROGRESS:
        
        else
          File_ActError := -10;          // error file close
          File_Step     := FILE_ERROR;
      end_case;
    

  	//=======================================================================================================
    // unknown step
  	//-------------------------------------------------------------------------------------------------------
    else

      File_Step := FILE_IDLE;

  	//=======================================================================================================

  end_case;
  //=========================================================================================================
  // END OF ASYNC FILE HANDLING XML
  //=========================================================================================================

END_FUNCTION


FUNCTION _WeatherForecast::CharToDint
	VAR_INPUT
		pBuffer 	: ^USINT;
		DataLen 	: UDINT;
	END_VAR
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
  VAR
   myBuffer : ARRAY [0..10] OF USINT;
   StrLength : DINT;
   BufferPos : DINT;
   i : DINT;
  END_VAR

  RetValue    := 0;
  
  if (PBuffer = NIL) then
    return;
  end_if;
  if (DataLen > 10) then
    return;
  end_if;
  SigCLib.StrNCpy(dst0:=#myBuffer[0], src0:=pBuffer, count:=DataLen);
  myBuffer[DataLen] := 0;
  StrLength := TO_DINT(SigCLib.StrLen(str:=#myBuffer[0]));
  BufferPos := StrLength - 1;

  for i:=0 to (StrLength - 1) do
    if ((myBuffer[BufferPos - i] >= '0') & (myBuffer[BufferPos - i] <= '9')) then
      case i of
        0: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 1);
        1: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 10);
        2: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 100);
        3: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 1000);
        4: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 10000);
        5: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 100000);
        6: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 1000000);
        7: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 10000000);
        8: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 100000000);
        9: RetValue += TO_DINT((myBuffer[BufferPos - i] - '0') * 1000000000);
      end_case; 

    elsif (myBuffer[BufferPos - i] = '-') then    // negate
      RetValue := RetValue * -1; 
    elsif ((myBuffer[BufferPos - i] = '.') | (myBuffer[BufferPos - i] = ',')) then    // start again in case of comma
      if ((myBuffer[BufferPos - i+1] - '0') >= 5) then
        RetValue := 1;
      else
        RetValue := 0;
      end_if;
      StrLength -= (i+1);
      i := -1;
      BufferPos := StrLength - 1;
    end_if;
  
  end_for;

END_FUNCTION


FUNCTION _WeatherForecast::MakeLocalTime
	VAR_INPUT
		pInTime 	: ^CHAR;
		UTC_Offset 	: DINT;
		pRetTime 	: ^CHAR;
	END_VAR

  VAR
  	myTime    : SYSTIME;
  	myDate    : SYSDATE;
    unixtime    : UDINT;
    myTxt : ARRAY [0..20] OF USINT;
  END_VAR

  if ((pInTime <> NIL) & (pRetTime <> NIL)) then
  
    myTime.wHour   := TO_UINT(CharToDint(pInTime +11, DataLen:=2));
    myTime.wMinute := TO_UINT(CharToDint(pInTime +14, DataLen:=2));
    myTime.wSecond := TO_UINT(CharToDint(pInTime +17, DataLen:=2));
    myTime.wSecond += 1;  // KaiAnd: workaround against UnixTimeStampConvert() bug (2017-10-01 00:00:00 -> 2017-09-31 00:00:00)

    myDate.wYear  := TO_UINT(CharToDint(pInTime +0, DataLen:=4));
    myDate.wMonth := TO_UINT(CharToDint(pInTime +5, DataLen:=2));
    myDate.wDay   := TO_UINT(CharToDint(pInTime +8, DataLen:=2));
    
    unixtime := SigCLib.UnixTimeStampReconvert(#myDate, #myTime);

    if (UTC_Offset > 0) then
      unixtime += TO_UDINT(UTC_Offset*3600);
    else
      unixtime -= TO_UDINT(UTC_Offset*-1 *3600);
    end_if;

    SigCLib.UnixTimeStampConvert(#myDate, #myTime, unixtime);
    myTime.wSecond -= 1;  // KaiAnd: workaround against UnixTimeStampConvert() bug (2017-10-01 00:00:00 -> 2017-09-31 00:00:00)

    SigCLib.IToA(val:=myDate.wYear, dst:=pRetTime, base:=10);
    SigCLib.StrCat(ps1:=pRetTime, ps2:="-");

    if (myDate.wMonth < 10) then
      SigCLib.StrCat(ps1:=pRetTime, ps2:="0");
    end_if;
    SigCLib.IToA(val:=myDate.wMonth, dst:=#myTxt[0], base:=10);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=#myTxt[0]);
    SigCLib.StrCat(ps1:=pRetTime, ps2:="-");

    if (myDate.wDay < 10) then
      SigCLib.StrCat(ps1:=pRetTime, ps2:="0");
    end_if;
    SigCLib.IToA(val:=myDate.wDay, dst:=#myTxt[0], base:=10);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=#myTxt[0]);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=" ");

    if (myTime.wHour < 10) then
      SigCLib.StrCat(ps1:=pRetTime, ps2:="0");
    end_if;
    SigCLib.IToA(val:=myTime.wHour, dst:=#myTxt[0], base:=10);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=#myTxt[0]);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=":");

    if (myTime.wMinute < 10) then
      SigCLib.StrCat(ps1:=pRetTime, ps2:="0");
    end_if;
    SigCLib.IToA(val:=myTime.wMinute, dst:=#myTxt[0], base:=10);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=#myTxt[0]);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=":");

    if (myTime.wSecond < 10) then
      SigCLib.StrCat(ps1:=pRetTime, ps2:="0");
    end_if;
    SigCLib.IToA(val:=myTime.wSecond, dst:=#myTxt[0], base:=10);
    SigCLib.StrCat(ps1:=pRetTime, ps2:=#myTxt[0]);

  end_if;

END_FUNCTION


FUNCTION _WeatherForecast::MakeSymbolCode
	VAR_INPUT
		pSymbolTxt 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		SymbolCode 	: INT;
	END_VAR

  if (pSymbolTxt = NIL) then
    SymbolCode := 0;
  else

    // first 2 chars are code, 3rd char is "n" (night) or "d" (day)
    // http://openweathermap.org/weather-conditions
    SymbolCode := TO_INT(CharToDint(pBuffer:=pSymbolTxt, DataLen:=2));
    if ((pSymbolTxt +2)^ = 'n') then
      SymbolCode += 1000;
    elsif ((pSymbolTxt +2)^ = 'd') then
      SymbolCode += 2000;
    end_if;

  end_if;

END_FUNCTION


FUNCTION _WeatherForecast::GetDayMonthWD
	VAR_INPUT
		DayOffset 	: DINT;
		pData 	: ^CHAR;
	END_VAR
  VAR
    DayWork     : DINT;
    DayEntry    : DINT;
    FoundNoDays : DINT;
    i           : DINT;
  END_VAR

  if (pData = NIL) then
    return;
  else    
    SigClib.StrCpy(dst0:=pData, src0:=".");
  end_if;

  DayWork := CharToDint(pBuffer:=#WeatherData[0].LocalTime_DateStamp[8], DataLen:=2);
  if (DayWork = 0) then
    return;  
  end_if;

  FoundNoDays := 0;
  for i:=0 to (WEATHERFC_XmlEntries-1) do
    
    DayEntry := CharToDint(pBuffer:=#WeatherData[i].LocalTime_DateStamp[8], DataLen:=2);

    if (DayEntry > 0)then

      if (DayEntry <> DayWork) then
        DayWork := DayEntry;
        FoundNoDays += 1;
      end_if;

      if (FoundNoDays = DayOffset) then
        // timestamp format: "2010-09-31 06:00:00"
        (pData + 0)^ := WeatherData[i].LocalTime_DateStamp[8];
        (pData + 1)^ := WeatherData[i].LocalTime_DateStamp[9];
        (pData + 2)^ := '.';
        (pData + 3)^ := WeatherData[i].LocalTime_DateStamp[5];
        (pData + 4)^ := WeatherData[i].LocalTime_DateStamp[6];
        (pData + 5)^ := 0;
        i := WEATHERFC_XmlEntries;              // escape the loop
      end_if;

    end_if;
 
  end_for;

END_FUNCTION


FUNCTION _WeatherForecast::GetSymbolCodeWD
	VAR_INPUT
		Hour 	: DINT;
		DayOffset 	: DINT;
	END_VAR
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
  VAR
    DayWork     : DINT;
    DayEntry    : DINT;
    FoundNoDays : DINT;
    i           : DINT;
  END_VAR

  RetValue := 0;
  DayWork := CharToDint(pBuffer:=#WeatherData[0].LocalTime_DateStamp[8], DataLen:=2);
  if (DayWork = 0) then
    return;  
  end_if;

  FoundNoDays := 0;
  for i:=0 to (WEATHERFC_XmlEntries-1) do
    
    DayEntry := CharToDint(pBuffer:=#WeatherData[i].LocalTime_DateStamp[8], DataLen:=2);

    if (DayEntry > 0)then

      if (DayEntry <> DayWork) then
        DayWork := DayEntry;
        FoundNoDays += 1;
      end_if;

      if (FoundNoDays = DayOffset) then
        if (WeatherData[i].LocalTime_fromHH >= Hour) then
          RetValue := WeatherData[i].SymbolCode;  // found the entry!
          i := WEATHERFC_XmlEntries;              // escape the loop
        end_if;
      end_if;

    end_if;
 
  end_for;

END_FUNCTION


FUNCTION _WeatherForecast::GetWeatherCodeWD
	VAR_INPUT
		Hour 	: DINT;
		DayOffset 	: DINT;
	END_VAR
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
  VAR
    DayWork     : DINT;
    DayEntry    : DINT;
    FoundNoDays : DINT;
    i           : DINT;
  END_VAR

  RetValue := 0;
  DayWork := CharToDint(pBuffer:=#WeatherData[0].LocalTime_DateStamp[8], DataLen:=2);
  if (DayWork = 0) then
    return;  
  end_if;

  FoundNoDays := 0;
  for i:=0 to (WEATHERFC_XmlEntries-1) do
    
    DayEntry := CharToDint(pBuffer:=#WeatherData[i].LocalTime_DateStamp[8], DataLen:=2);

    if (DayEntry > 0)then

      if (DayEntry <> DayWork) then
        DayWork := DayEntry;
        FoundNoDays += 1;
      end_if;

      if (FoundNoDays = DayOffset) then
        if (WeatherData[i].LocalTime_fromHH >= Hour) then
          RetValue := WeatherData[i].SymbolNumber;  // found the entry!
          i := WEATHERFC_XmlEntries;                // escape the loop
        end_if;
      end_if;

    end_if;
 
  end_for;

END_FUNCTION


FUNCTION _WeatherForecast::GetTempMinWD
	VAR_INPUT
		DayOffset 	: DINT;
	END_VAR
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
  VAR
    DayWork     : DINT;
    DayEntry    : DINT;
    FoundNoDays : DINT;
    myMin       : DINT;
    i           : DINT;
  END_VAR

  RetValue := 0;
  DayWork := CharToDint(pBuffer:=#WeatherData[0].LocalTime_DateStamp[8], DataLen:=2);
  if (DayWork = 0) then
    return;  
  end_if;

  FoundNoDays := 0;
  myMin := 9999;
  for i:=0 to (WEATHERFC_XmlEntries-1) do
    
    DayEntry := CharToDint(pBuffer:=#WeatherData[i].LocalTime_DateStamp[8], DataLen:=2);

    if (DayEntry > 0)then

      if (DayEntry <> DayWork) then
        DayWork := DayEntry;
        FoundNoDays += 1;
      end_if;

      if (FoundNoDays = DayOffset) then
        if (WeatherData[i].TempMin_C < myMin) then
          myMin := WeatherData[i].TempMin_C;
          RetValue := myMin;                // found entry!
        end_if;
      end_if;

    end_if;
 
  end_for;

END_FUNCTION


FUNCTION _WeatherForecast::GetTempMaxWD
	VAR_INPUT
		DayOffset 	: DINT;
	END_VAR
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
  VAR
    DayWork     : DINT;
    DayEntry    : DINT;
    FoundNoDays : DINT;
    myMax       : DINT;
    i           : DINT;
  END_VAR

  RetValue := 0;
  DayWork := CharToDint(pBuffer:=#WeatherData[0].LocalTime_DateStamp[8], DataLen:=2);
  if (DayWork = 0) then
    return;  
  end_if;

  FoundNoDays := 0;
  myMax := -9999;
  for i:=0 to (WEATHERFC_XmlEntries-1) do
    
    DayEntry := CharToDint(pBuffer:=#WeatherData[i].LocalTime_DateStamp[8], DataLen:=2);

    if (DayEntry > 0)then

      if (DayEntry <> DayWork) then
        DayWork := DayEntry;
        FoundNoDays += 1;
      end_if;

      if (FoundNoDays = DayOffset) then
        if (WeatherData[i].TempMin_C > myMax) then
          myMax := WeatherData[i].TempMax_C;
          RetValue := myMax;                // found entry!
        end_if;
      end_if;

    end_if;
 
  end_for;

END_FUNCTION


FUNCTION _WeatherForecast::ChkURLchanged
	VAR_OUTPUT
		result 	: DINT;
	END_VAR

	VAR
		newChkSum  : DINT;
    len        : UDINT;
    u 	       : UDINT;
	END_VAR

  result := 0;
  newChkSum := 0;
  len := SigCLib.StrLen(str:=#URL_String[0]);
  for u:=0 to (len -1) do
    newChkSum += URL_String[u];
  end_for;
  if (URL_StringChkSum <> newChkSum) then
    URL_StringChkSum := newChkSum;
    result := 1;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyAddress::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	ProxyAddress := Str_ProxyAddress.Data.Read();
	output := ProxyAddress;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyAddress::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ProxyAddress := input;
 	result := (Str_ProxyAddress.Data.Write(ProxyAddress))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyUser::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	ProxyUser := Str_ProxyUser.Data.Read();
	output := ProxyUser;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyUser::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ProxyUser := input;
 	result := (Str_ProxyUser.Data.Write(ProxyUser))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyPassword::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	ProxyPassword := Str_ProxyPassword.Data.Read();
	output := ProxyPassword;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyPassword::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ProxyPassword := input;
 	result := (Str_ProxyPassword.Data.Write(ProxyPassword))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyPort::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	ProxyPort := Str_ProxyPort.Data.Read();
	output := ProxyPort;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyPort::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ProxyPort := input;
 	result := (Str_ProxyPort.Data.Write(ProxyPort))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocName::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WeatherLocName := Str_WeatherLocName.Data.Read();
	output := WeatherLocName;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocName::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WeatherLocName := input;
 	result := (Str_WeatherLocName.Data.Write(WeatherLocName))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocCountry::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WeatherLocCountry := Str_WeatherLocCountry.Data.Read();
	output := WeatherLocCountry;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocCountry::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WeatherLocCountry := input;
 	result := (Str_WeatherLocCountry.Data.Write(WeatherLocCountry))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherUserID::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WeatherUserID := Str_WeatherUserID.Data.Read();
	output := WeatherUserID;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherUserID::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WeatherUserID := input;
 	result := (Str_WeatherUserID.Data.Write(WeatherUserID))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::ProxyIsUsed::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if (Status <> -2) then  // if HTTP-client is initialized
    ProxyIsUsed := input;
    result := ProxyIsUsed;  
    SetProxy:= TRUE;      // SetOptions(); no method call from a write function v1.01
  end_if;


END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Status::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  if (Status <> -2) then  // if HTTP-client is initialized
    GetHttpData:= TRUE;
  end_if;
  
  result := Status;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherURL::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WeatherURL := Str_WeatherURL.Data.Read();
	output := WeatherURL;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherURL::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WeatherURL := input;
 	result := (Str_WeatherURL.Data.Write(WeatherURL))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Reset_URL::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Reset_URL := input;
 	result := Reset_URL;

  SetWeatherURL();

  Reset_URL := 0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocID::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WeatherLocID := Str_WeatherLocID.Data.Read();
	output := WeatherLocID;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocID::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WeatherLocID := input;
	result := (Str_WeatherLocID.Data.Write(WeatherLocID))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::WeatherLocMode::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	WeatherLocMode := input;
	result := WeatherLocMode;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day1_DD_MM::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	Day1_DD_MM := Str_Day1_DD_MM.Data.Read();
	output := Day1_DD_MM;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day1_DD_MM::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	Day1_DD_MM := input;
	result := (Str_Day1_DD_MM.Data.Write(Day1_DD_MM))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day2_DD_MM::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	Day2_DD_MM := Str_Day2_DD_MM.Data.Read();
	output := Day2_DD_MM;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day2_DD_MM::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	Day2_DD_MM := input;
	result := (Str_Day2_DD_MM.Data.Write(Day2_DD_MM))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day3_DD_MM::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	Day3_DD_MM := Str_Day3_DD_MM.Data.Read();
	output := Day3_DD_MM;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day3_DD_MM::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	Day3_DD_MM := input;
	result := (Str_Day3_DD_MM.Data.Write(Day3_DD_MM))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day4_DD_MM::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	Day4_DD_MM := Str_Day4_DD_MM.Data.Read();
	output := Day4_DD_MM;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day4_DD_MM::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	Day4_DD_MM := input;
	result := (Str_Day4_DD_MM.Data.Write(Day4_DD_MM))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day5_DD_MM::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	Day5_DD_MM := Str_Day5_DD_MM.Data.Read();
	output := Day5_DD_MM;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::Day5_DD_MM::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	Day5_DD_MM := input;
	result := (Str_Day5_DD_MM.Data.Write(Day5_DD_MM))$UDINT;

END_FUNCTION




FUNCTION VIRTUAL GLOBAL _WeatherForecast::LastLocationName::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	LastLocationName := Str_LastLocationName.Data.Read();
	output := LastLocationName;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _WeatherForecast::LastLocationName::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	LastLocationName := input;
	result := (Str_LastLocationName.Data.Write(LastLocationName))$UDINT;

END_FUNCTION


