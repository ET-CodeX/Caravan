//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_IPConfigIF"
	Revision           = "1.1"
	GUID               = "{07B48D02-17AF-40C3-96FF-E8B2AB5A0E3E}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(780,720)"
	Comment            = "IP Configuration Interface&#13;&#10;Load &amp; Save settings">
	<Channels>
		<Server Name="ClassSvr" Remotely="true">
		</Server>
		<Server Name="CmdError" GUID="{1F580B72-942D-4597-9D85-712810AC0745}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="error-code if an error occured while working a set or reset command"/>
		<Server Name="ExtResetCmd" GUID="{69AB8CD4-32CD-4026-9432-E128C6573FD9}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="when this Server gets set to 1,&#13;&#10;settings for a reset are done"/>
		<Server Name="NetMode" GUID="{3A58AB12-1D78-4DAC-BF9E-7C7ED5B8AD3C}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="actual network mode"/>
		<Server Name="SavGWAddress" GUID="{582EA4FB-05CB-4F11-AE15-96403920E799}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="saved Network gateway&#13;&#10;for restore in case of problems"/>
		<Server Name="SavIPAddress" GUID="{42DCA04E-CCF0-4663-AB13-3F2336B49009}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="saved Network IP address&#13;&#10;for restore in case of problems"/>
		<Server Name="SavSNMask" GUID="{E9AB48A5-1ED5-49D5-B287-0C66225E7D28}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="saved Network subnet mask&#13;&#10;for restore in case of problems"/>
		<Server Name="TimeoutCnt" GUID="{83432CE9-9DBF-4D5C-AE01-119AA330627F}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="actual counter timeout [s]"/>
		<Client Name="ChangedIPSettings" Required="false" Internal="false" Comment="this Client transfers the new IP&#13;&#10;Settings via CommandChannel if &#13;&#10;the IP-Settings have been changed."/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_IPConfigIF\_IPConfigIF_de.pdf"/>
			<File Path=".\Class\_IPConfigIF\_IPConfigIF_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.1" Date="2018-04-10" Author="FurLuk" Company="Sigmatek" Description="added Server for resetting via USB-Stick&#13;&#10;added Client which sends changed IP-Settings via NewInst-Command"/>
		<Dokumentation Revision="1.0" Date="2017-11-28" Author="KaiAnd" Company="Sigmatek GmbH" Description="Class created"/>
	</RevDoku>
	<Network Name="_IPConfigIF">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{8BDB9DED-5FFE-4D44-A28E-E8C19B4E1172}"
				Class      = "NetworkConfig"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="GetConfig"/>
					<Server Name="GWAddress"/>
					<Server Name="IPAddress"/>
					<Server Name="SetConfig"/>
					<Server Name="SNMask"/>
					<Client Name="coFileSys"/>
					<Client Name="coIP"/>
					<Client Name="coSigCLib"/>
					<Client Name="coStdLib"/>
					<Client Name="Interface"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(916,210),(744,210),"/>
			<Connection Source="this.IPAddress" Destination="_base.IPAddress" Vertices="(916,270),(744,270),"/>
			<Connection Source="this.SNMask" Destination="_base.SNMask" Vertices="(916,330),(744,330),"/>
			<Connection Source="this.GWAddress" Destination="_base.GWAddress" Vertices="(916,390),(744,390),"/>
			<Connection Source="_base.Interface" Destination="this.Interface" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using NetworkConfig

_IPConfigIF : CLASS
: NetworkConfig
	TYPE
	  t_e_IF_NET_MODE :  //! <Type Public="true" Name="t_e_IF_NET_MODE"/>
	  (
	    IF_undef,
	    IF_InitDeviceIP,
	    IF_DeviceIP,
	    IF_SoftwareIP
	  )$UDINT;
	END_TYPE
  //Servers:
	SavIPAddress 	: SvrCh_HDINT;
	SavSNMask 	: SvrCh_HDINT;
	SavGWAddress 	: SvrCh_HDINT;
	TimeoutCnt 	: SvrCh_DINT;
	NetMode 	: SvrCh_t_e_IF_NET_MODE_PTofCls__IPConfigIF;
	CmdError 	: SvrCh_DINT;
	ExtResetCmd 	: SvrCh_DINT;
  //Clients:
	ChangedIPSettings 	: CltChCmd_DINT;
  //Variables:
		InitDone 	: DINT;
		IsCon_ChangedIPSettings 	: DINT;
		TimeStampHmsImp 	: UDINT;
		TimeStampSecImp 	: UDINT;
		hmsImp 	: DINT;
		secImp 	: DINT;
		ExtNiCommand 	: UDINT;
		ExtNiCmd_HmsWait 	: DINT;
		SaveCmdActive 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="sets the addresses in the OS.&#13;&#10;works like SetIPOS() in the base class AND returns the retval." Name="SetIPOSret"/>
	FUNCTION SetIPOSret
		VAR_OUTPUT
			retval 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::NewInst
		VAR_INPUT
			pPara 	: ^CmdStruct;
			pResult 	: ^results;
		END_VAR
		VAR_OUTPUT
			ret_code 	: iprStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ExtResetCmd::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _IPConfigIF::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__IPCONFIGIF
1$UINT, 1$UINT, (SIZEOF(::_IPConfigIF))$UINT, 
7$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1245802338), "_IPConfigIF", //Class
TO_UDINT(3068426329), "NetworkConfig", 1$UINT, 31$UINT, //Baseclass
//Servers:
(::_IPConfigIF.SavIPAddress.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(462190284), "SavIPAddress", 
(::_IPConfigIF.SavSNMask.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(226695690), "SavSNMask", 
(::_IPConfigIF.SavGWAddress.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3649807431), "SavGWAddress", 
(::_IPConfigIF.TimeoutCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3210597106), "TimeoutCnt", 
(::_IPConfigIF.NetMode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2605012621), "NetMode", 
(::_IPConfigIF.CmdError.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(529452920), "CmdError", 
(::_IPConfigIF.ExtResetCmd.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1342819887), "ExtResetCmd", 
//Clients:
(::_IPConfigIF.ChangedIPSettings.pCh)$UINT, _CH_CLT_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(997857054), "ChangedIPSettings", 
END_FUNCTION


#define USER_CNT__IPConfigIF 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__IPConfigIF] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _IPConfigIF::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= NetworkConfig::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= NetworkConfig::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, NetworkConfig::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__IPConfigIF;
	vmt.CmdTable.NewInstr		:= #ClassSvr::NewInst();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	NetworkConfig::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF NetworkConfig::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SavIPAddress.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SavIPAddress.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SavSNMask.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SavSNMask.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SavGWAddress.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SavGWAddress.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TimeoutCnt.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TimeoutCnt.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	NetMode.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF NetMode.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ExtResetCmd.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ExtResetCmd::Write() );
	IF ExtResetCmd.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL _IPConfigIF::Init


  if (InitDone = FALSE) then
  
    InitDone := TRUE;

      //=======================================================================================================
      // GET or SET IP addresses depending on the NetMode
      //=======================================================================================================

      if (SavIPAddress = 0) then
        NetMode.Write(IF_InitDeviceIP);
      end_if;

      //---------------------------------------------------------------------------------------------------
      //  Case A: Station is NOT in NetMode "Software-IP"
      //---------------------------------------------------------------------------------------------------
      if (NetMode <> IF_SoftwareIP) then
      
        GetIPAutoexec();                // get the addresses from the autoexec
        SetIPOSret();                   // set the addresses in the OS
        SavIPAddress.Write(IPAddress);  // IP address
        SavSNMask.Write(SNMask);        // Subnet mask
        SavGWAddress.Write(GWAddress);  // Gateway
        NetMode.Write(IF_DeviceIP);

      //---------------------------------------------------------------------------------------------------
      //  Case B: Station IS in NetMode "Software-IP"
      //---------------------------------------------------------------------------------------------------
      else

        IPAddress.Write(SavIPAddress);  // IP address
        SNMask.Write(SavSNMask);        // Subnet mask
        GWAddress.Write(SavGWAddress);  // Gateway
        SetIPOSret();                   // set the addresses in the OS

      end_if;

      //=======================================================================================================
      
      //---------------------------------------------------------------------------------------------------
      //- check if the Client ChangedIPSettings is connected and set Flag                   - FurLuk V1.1 -
      if (IsClientConnected(input:=#ChangedIPSettings) = TRUE) then
        IsCon_ChangedIPSettings := TRUE;
      else
        IsCon_ChangedIPSettings := FALSE;
      end_if;
      //--- End FurLuk

    end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _IPConfigIF::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
    ret : DINT;
  END_VAR

	state := READY;

  //===================================================================================================================
  // call the base
  //-------------------------------------------------------------------------------------------------------------------
  NetworkConfig::Background(EAX);


  //===================================================================================================================
  // generate the time impulse
  //-------------------------------------------------------------------------------------------------------------------
	hmsImp := 0;
  if ((ops.tAbsolute - TimeStampHmsImp) >= 100) then
    TimeStampHmsImp := ops.tAbsolute;
	  hmsImp := 1;
  end_if;  

	secImp := 0;
  if ((ops.tAbsolute - TimeStampSecImp) >= 1000) then
    TimeStampSecImp := ops.tAbsolute;
	  secImp := 1;
  end_if;  


  //===================================================================================================================
  // external work for time-consuming NewInst commands
  //-------------------------------------------------------------------------------------------------------------------
  if (ExtNiCommand > 0) then

    ExtNiCmd_HmsWait -= hmsImp;
    if (ExtNiCmd_HmsWait < 0) then
      ExtNiCmd_HmsWait := 0;

      CmdError := 0;
      ret := 0;
      case (ExtNiCommand) of

        //-------------------------------------------------------------------------------------------------------------
        // Command 11: Set Interface Config autoexec
        // Command 12: Set Interface Config OS
        // Command 13: Set Interface Config autoexec and OS
        // Command 21: Reset Interface Config autoexec without timeout monitoring
        // Command 22: Reset Interface Config OS without timeout monitoring
        // Command 23: Reset Interface Config autoexec and OS without timeout monitoring
        //-------------------------------------------------------------------------------------------------------------
        11, 21:     
          SetIPAutoexec();
        12, 22:
          ret:= SetIPOSret();
        13, 23:
          SetIPAutoexec();
          ret:= SetIPOSret();

      end_case;

      ExtNiCommand := 0;
      if (ret < 0) then
        CmdError := ret;
      end_if;

    end_if;

  end_if;


  //===================================================================================================================
  // TimeOut of the Save command
  //-------------------------------------------------------------------------------------------------------------------
  if (SaveCmdActive > 0) then

    TimeoutCnt.Write(TimeoutCnt - secImp);
    if (TimeoutCnt < 0) then
      TimeoutCnt := 0;    

      IPAddress.Write(SavIPAddress);  // restore IP address
      SNMask.Write(SavSNMask);        // restore Subnet mask
      GWAddress.Write(SavGWAddress);  // restore Gateway
      if (SaveCmdActive = 11) then
        SetIPAutoexec();
      elsif (SaveCmdActive = 12) then
        ret := SetIPOSret();
      else
        SetIPAutoexec();
        ret := SetIPOSret();
      end_if;

      SaveCmdActive := 0;         // clear the internal save command
    end_if;

  end_if;

  //===================================================================================================================

END_FUNCTION


FUNCTION _IPConfigIF::SetIPOSret
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR

VAR
	tmpIPAddress  : ARRAY[0..15] OF CHAR;
  tmpSNMask     : ARRAY[0..15] OF CHAR;
  tmpGWAddress  : ARRAY[0..15] OF CHAR;
END_VAR

  // Convert IP-Address to String
  coIP.ConvertBinToStr( strAddress    := #tmpIPAddress[0], 
                        strAddressLen := sizeof(tmpIPAddress), 
                        IPAddress     := IPAddress);

  // Convert SubnetMask to String
  coIP.ConvertBinToStr( strAddress    := #tmpSNMask[0], 
                        strAddressLen := sizeof(tmpSNMask), 
                        IPAddress     := SNMask);


  // Convert Gateway to String
  coIP.ConvertBinToStr( strAddress    := #tmpGWAddress[0], 
                        strAddressLen := sizeof(tmpGWAddress), 
                        IPAddress     := GWAddress);
                                                    
  // Get selected Interface
  Interface := Interface.Read();
  
  //Set new IP Configuration
  retval := coIP.SetIP( InterfaceNumber := Interface, 
                        Address         := #tmpIPAddress[0], 
                        SubnetMask      := #tmpSNMask[0], 
                        Gateway         := #tmpGWAddress[0]);

END_FUNCTION


//*******************************************************************************************************************************
// called from extern via command channel
//*******************************************************************************************************************************
FUNCTION VIRTUAL GLOBAL _IPConfigIF::ClassSvr::NewInst
	VAR_INPUT
		pPara 	: ^CmdStruct;
		pResult 	: ^results;
	END_VAR
	VAR_OUTPUT
		ret_code 	: iprStates;
	END_VAR
  VAR
    ret : DINT;
    NiGive : CmdStruct; 
    NiGet  : results;
  END_VAR

  //=========================================================================================================================
  ret_code := BUSY;

  if ((pPara = NIL) | (pResult = NIL)) then
    return;
  end_if;

  ret := 0;     // default ret-value: no error

  case (pPara^.uiCmd) of
  
    //-------------------------------------------------------------------------------------------------------------------
    // Command  1: Get Interface Config from autoexec
    // Command  2: Get Interface Config from OS
    //-------------------------------------------------------------------------------------------------------------------
    1, 2:
      if (pPara^.uiCmd = 1) then
        GetIPAutoexec();
      else
        GetIPOS();
      end_if;
      
      pResult^.aData[0]$UDINT := IPAddress;           // result I 000: IP address
      pResult^.aData[4]$UDINT := SNMask;              // result I 004: Subnet mask
      pResult^.aData[8]$UDINT := GWAddress;           // result I 008: Gateway
      pResult^.uiLng := sizeof(pResult^.uiLng) + 12;  // set return lenght
      ret_code := READY;

    //-------------------------------------------------------------------------------------------------------------------
    // Command 11: Set Interface Config autoexec
    // Command 12: Set Interface Config OS
    // Command 13: Set Interface Config autoexec and OS
    //-------------------------------------------------------------------------------------------------------------------
    11, 12, 13:
      SavIPAddress.Write(IPAddress);                  // SAVE old IP address
      SavSNMask.Write(SNMask);                        // SAVE old Subnet mask
      SavGWAddress.Write(GWAddress);                  // SAVE old Gateway
      IPAddress.Write(pPara^.aPara[0]$UDINT);         // new IP address
      SNMask.Write(pPara^.aPara[1]$UDINT);            // new Subnet mask
      GWAddress.Write(pPara^.aPara[2]$UDINT);         // new Gateway
      ExtNiCmd_HmsWait := pPara^.aPara[3];            // Time Delay for command work [100 ms] within the IF object
      TimeoutCnt       := pPara^.aPara[4];            // Timeout (raise the counter)

      ExtNiCommand  := pPara^.uiCmd;                  // set the command for external work of time-consuming NewInst() commands
      SaveCmdActive := pPara^.uiCmd;                  // set the internal save-command for Timeout

      pResult^.aData[0]$DINT := 0;                    // result I 000: 0
      pResult^.uiLng := sizeof(pResult^.uiLng) + 4;   // set return lenght
      ret_code := READY;
      
    //-------------------------------------------------------------------------------------------------------------------
    // Command 21: Reset Interface Config autoexec without timeout monitoring
    // Command 22: Reset Interface Config OS without timeout monitoring
    // Command 23: Reset Interface Config autoexec and OS without timeout monitoring
    //-------------------------------------------------------------------------------------------------------------------
    21, 22, 23:
      IPAddress.Write(pPara^.aPara[0]$UDINT);         // new IP address
      SNMask.Write(pPara^.aPara[1]$UDINT);            // new Subnet mask
      GWAddress.Write(pPara^.aPara[2]$UDINT);         // new Gateway
      ExtNiCmd_HmsWait := pPara^.aPara[3];            // Time Delay for command work [100 ms] within the IF object
      SavIPAddress.Write(IPAddress);                  // SAVE IP address
      SavSNMask.Write(SNMask);                        // SAVE Subnet mask
      SavGWAddress.Write(GWAddress);                  // SAVE Gateway

      ExtNiCommand  := pPara^.uiCmd;                  // set the command for external work of time-consuming NewInst() commands
      SaveCmdActive := 0;                             // without timeout monitoring

      pResult^.aData[0]$DINT := 0;                    // result I 000: 0
      pResult^.uiLng := sizeof(pResult^.uiLng) + 4;   // set return lenght
      ret_code := READY;
      
    //-------------------------------------------------------------------------------------------------------------------
    // Command 99: send OK info to IF-object
    //-------------------------------------------------------------------------------------------------------------------
    99:
      if ((SaveCmdActive >= 11) & (SaveCmdActive <= 13)) then
        SavIPAddress.Write(IPAddress);                // SAVE new IP address
        SavSNMask.Write(SNMask);                      // SAVE new Subnet mask
        SavGWAddress.Write(GWAddress);                // SAVE new Gateway
        NetMode.Write(IF_SoftwareIP);
        
        //---------------------------------------------------------------------------------------------------------------
        //- Transfer the changed IP-Settings via CommandChannel of the Client ChangedIPSettings           - FurLuk V1.1 -
        //---------------------------------------------------------------------------------------------------------------
        if (IsCon_ChangedIPSettings) then
          
          NiGive.uiCmd := 1;
          NiGive.aPara[0] := SavIPAddress$DINT;
          NiGive.aPara[1] := SavSNMask$DINT;
          NiGive.aPara[2] := SavGWAddress$DINT;
          ChangedIPSettings.NewInst(#NiGive, #NiGet);
          
        end_if;
        //---------------------------------------------------------------------------------------------------------------
        
      end_if;
      SaveCmdActive := 0;                             // clear the internal save command
      pResult^.aData[0]$DINT := 0;                    // result I 000: 0
      pResult^.uiLng := sizeof(pResult^.uiLng) + 4;   // set return lenght
      ret_code := READY;

    //-------------------------------------------------------------------------------------------------------------------
    // Command xx: 
    //-------------------------------------------------------------------------------------------------------------------


    //-------------------------------------------------------------------------------------------------------------------

  end_case;
  //=========================================================================================================================

END_FUNCTION  // ::ClassSvr::NewInst


FUNCTION VIRTUAL GLOBAL _IPConfigIF::ExtResetCmd::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ExtResetCmd := input;
  
  if (ExtResetCmd = 1) then
    
    NetMode := NetMode.Write(input:=IF_DeviceIP);
    
  end_if;

	result := ExtResetCmd;

END_FUNCTION
