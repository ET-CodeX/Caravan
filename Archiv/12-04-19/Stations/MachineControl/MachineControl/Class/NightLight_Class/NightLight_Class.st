//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "NightLight_Class"
	Revision           = "0.0"
	GUID               = "{D670F3D6-E7F5-4D89-81B1-D90EC6C8DA1A}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "50 µs"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(780,180)">
	<Channels>
		<Server Name="ClassSvr" GUID="{74480FD5-1A42-4DAE-8215-88FCEB6AD736}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="NightlightHZS_S" GUID="{CF0305DE-AE81-4BAD-9447-01E922C9D15D}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sBrightness" GUID="{6D38303F-81AC-4FF5-B2A6-E7CD6B5F1604}" Visualized="true" Initialize="true" DefValue="0" WriteProtected="false" Retentive="SRam"/>
		<Client Name="cNightlightSwitch" Required="true" Internal="false"/>
		<Client Name="OC_To_Timer_Class" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
NightLight_Class : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	NightlightHZS_S 	: SvrCh_DINT;
	sBrightness 	: SvrCh_DINT;
  //Clients:
	OC_To_Timer_Class 	: CltChCmd_Timer_Class;
	cNightlightSwitch 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd Timer_Class


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB NightLight_Class::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_NIGHTLIGHT_CLASS
0$UINT, 0$UINT, (SIZEOF(::NightLight_Class))$UINT, 
3$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2856325874), "NightLight_Class", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::NightLight_Class.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::NightLight_Class.NightlightHZS_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2044613902), "NightlightHZS_S", 
(::NightLight_Class.sBrightness.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3149441379), "sBrightness", 
//Clients:
(::NightLight_Class.OC_To_Timer_Class.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(352240581), "OC_To_Timer_Class", TO_UDINT(440431991), "Timer_Class", 0$UINT, 0$UINT, 
(::NightLight_Class.cNightlightSwitch.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2399022407), "cNightlightSwitch", 
END_FUNCTION


#define USER_CNT_NightLight_Class 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_NightLight_Class] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION NightLight_Class::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_NightLight_Class, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	NightlightHZS_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF NightlightHZS_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sBrightness.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sBrightness.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL NightLight_Class::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  
  
  //Read
  
  cNightlightSwitch :=  cNightlightSwitch.Read();
  
  NightlightHZS_S   :=   NightlightHZS_S.Read();
  
  sBrightness       :=   sBrightness.Read();
  
  
  if OC_To_Timer_Class.Nachtmodus_S = 1 & NightlightHZS_S = 1 then
  
        cNightlightSwitch   :=    cNightlightSwitch.Write(input:=sBrightness);
        
     else
     
        cNightlightSwitch   :=    cNightlightSwitch.Write(input:=0);
        
  
  end_if;

  


	state := READY;

END_FUNCTION
