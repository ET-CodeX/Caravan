//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_SearchUsbFiletoReset"
	Revision           = "1.0"
	GUID               = "{9916411D-7E18-477D-ABF4-534D422D9AD1}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	DefCyclictime      = "1000 ms"
	BackgroundTask     = "true"
	DefBackground      = "1000 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,420)"
	Comment            = "this class checks if a new USB-Stick &#13;&#10;was plugged in and then after &#13;&#10;waiting the initialisation time, &#13;&#10;the class searches for the given file &#13;&#10;from a StringRAM object.">
	<Channels>
		<Server Name="ClassSvr" GUID="{CC74996A-E0EA-450E-BCE4-F61ABF26FC44}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="not used so far"/>
		<Client Name="_FileSys" Required="false" Internal="false" Comment="ObjectChannel connected to _FileSys &#13;&#10;(don&apos;t connect)"/>
		<Client Name="_OSKernel" Required="false" Internal="false" Comment="ObjectChannel to _OSKernel&#13;&#10;(don&apos;t connect)"/>
		<Client Name="FilePathName" Required="true" Internal="false" Comment="ObjectChannel, connected to the &#13;&#10;StringRam Object where the filepath &#13;&#10;is Stored"/>
		<Client Name="OutResetCmd" Required="false" Internal="false" Comment="Client to set resetvalues from &#13;&#10;_IPConfigIF"/>
		<Client Name="SigCLib" Required="false" Internal="false" Comment="ObjectChannel to SigCLib&#13;&#10;(don&apos;t connect)"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_SearchUsbFiletoReset\_SearchUsbFiletoReset_de.pdf"/>
			<File Path=".\Class\_SearchUsbFiletoReset\_SearchUsbFiletoReset_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.0" Date="2018-04-06" Author="FurLuk" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
</Class>
*)
_SearchUsbFiletoReset : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	_FileSys 	: CltChCmd__FileSys;
	_OSKernel 	: CltChCmd__OSKernel;
	SigCLib 	: CltChCmd_SigCLib;
	FilePathName 	: CltChCmd_StringRAM;
	OutResetCmd 	: CltCh_DINT;
  //Variables:
		IsCon_OutResetCmd 	: BOOL;			//! <Variable Comment="connection flag for the server to reset" Name="IsCon_OutResetCmd"/>
		RetDriveList : ARRAY [0..25] OF SINT;
			//! <Variable Comment="the returned variable from _Filesys &#13;&#10;function GetDriveListShort()" Name="RetDriveList"/>
		LastDriveList : ARRAY [0..25] OF SINT;
			//! <Variable Comment="the old RetDriveList-Array gets stored&#13;&#10;in here to be able to compare the &#13;&#10;plugged Usbs" Name="LastDriveList"/>
		ChangeMaskUSB : ARRAY [0..25] OF BOOL;
			//! <Variable Comment="if there is set a flag inside this array,&#13;&#10;a new Usb-Stick got plugged in&#13;&#10;(the Array position is the drive &#13;&#10;position)" Name="ChangeMaskUSB"/>
		DriveName : ARRAY [0..3] OF CHAR;
			//! <Variable Comment="the drive name and the drive name&#13;&#10;extension is stored in here (with &#13;&#10;0 termination)" Name="DriveName"/>
		tmpFullPath : ARRAY [0..50] OF CHAR;
			//! <Variable Comment="the full path of the needed file gets&#13;&#10;generated and stored in here" Name="tmpFullPath"/>
		IsFirstRun 	: BOOL;			//! <Variable Comment="inverted flag for first background &#13;&#10;cycle" Name="IsFirstRun"/>
		timestamp 	: UDINT;			//! <Variable Comment="timestamp for the initialisation time&#13;&#10;of the Usb-Stick" Name="timestamp"/>
		InitTimeUSB 	: UDINT;			//! <Variable Comment="here the initialisation fime for the&#13;&#10;Usb-Stick can be set" Name="InitTimeUSB"/>
		IsFileRead 	: BOOL;			//! <Variable Comment="flag if the file got already seeked" Name="IsFileRead"/>
		CyclesUntilReset 	: DINT;			//! <Variable Comment="shows the background cycles until&#13;&#10;reboot" Name="CyclesUntilReset"/>
  //Functions:
				//! <Function Comment="Initialisation of Variables" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="In this task the function of the Class&#13;&#10;is done" Name="Background"/>
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _FileSys
#pragma usingLtd _OSKernel
#pragma usingLtd SigCLib
#pragma usingLtd StringRAM


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _SearchUsbFiletoReset::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__SEARCHUSBFILETORESET
1$UINT, 0$UINT, (SIZEOF(::_SearchUsbFiletoReset))$UINT, 
1$UINT, 5$UINT, 0$UINT, 
TO_UDINT(4101473903), "_SearchUsbFiletoReset", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_SearchUsbFiletoReset.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::_SearchUsbFiletoReset._FileSys.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(545279513), "_FileSys", TO_UDINT(545279513), "_FileSys", 1$UINT, 19$UINT, 
(::_SearchUsbFiletoReset._OSKernel.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3045737964), "_OSKernel", TO_UDINT(3045737964), "_OSKernel", 0$UINT, 4$UINT, 
(::_SearchUsbFiletoReset.SigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(77440046), "SigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 23$UINT, 
(::_SearchUsbFiletoReset.FilePathName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(406440639), "FilePathName", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::_SearchUsbFiletoReset.OutResetCmd.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1196956955), "OutResetCmd", 
END_FUNCTION


#define USER_CNT__SearchUsbFiletoReset 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__SearchUsbFiletoReset] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _SearchUsbFiletoReset::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__SearchUsbFiletoReset, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL _SearchUsbFiletoReset::Init
  
  if (_FirstScan) then
    
    //---------------------------------------------------------------------------------------------
    //  check client-connnections and set flags
    //---------------------------------------------------------------------------------------------
    if (IsClientConnected(#OutResetCmd) = 1) then
      IsCon_OutResetCmd := TRUE;
    else 
      IsCon_OutResetCmd := FALSE;
    end_if;    
    
    // initialise Variables
    IsFirstRun := 1;
    InitTimeUSB := 2000;
    IsFileRead := 1;
    CyclesUntilReset := 0;
    
  end_if;
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL _SearchUsbFiletoReset::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  VAR
    i     : DINT;
    tmpDrivePath : ARRAY [0..50] of CHAR;
    tmpLength : UDINT;
    ret : DINT;
  END_VAR
  
  //----- restart Station after one cycle if flag gets set ----------------------------------------
  if (CyclesUntilReset > 0) then
    
    CyclesUntilReset -= 1;
    
    if (CyclesUntilReset = 0) then
      _OSKernel.Reboot();
    end_if;
    
  end_if;
  
  //-----------------------------------------------------------------------------------------------
  // Get the actual Drive List (ret value is an char array, [0] for "A", [25] for "Z")
  //-----------------------------------------------------------------------------------------------
  // Bit 0 ... 0 = no drive found / 1 = drive found
  // Bit 1 ... 0 = Floppy Drive / 1 = HDD
  // Bit 2 to 5 ... Drivetype
  //  001  IDE
  //  010  USB
  //  011  CME221
  //  100  Smartmedia
  //  101  Userdata RAM-Disk
  //  110  Samba Mount (only Salamander)
  _FileSys.GetDriveListShort(drivelist:=#RetDriveList$CHAR);
  
  //----- check for a new plugged in USB and save in a Flagarray ----------------------------------
  for i:=3 to 25 do
    if (RetDriveList[i] = 2#00001011) then
      
      ChangeMaskUSB[i] := 0;
      
      if (LastDriveList[i] <> RetDriveList[i]) then
        
        if (LastDriveList[i] = 0) then
          
          if (IsFirstRun = 0) then
            
            ChangeMaskUSB[i] := 1;
            
          end_if;
          
        end_if;
        
      end_if;
      
      LastDriveList[i] := RetDriveList[i];
      
    else
      LastDriveList[i] := 0;
    end_if; 
  end_for;
  
  //===== check for a new plugged in USB and generate path of the File ============================
  for i:=3 to 25 do
    
    if (ChangeMaskUSB[i] = 1) then
    
      //generating full file path to tmpFullPath --------------------------------------------------
      //generate driveletter & drive extension
      DriveName[0] := to_usint(i) + 65;
      DriveName[1] := ':';
      DriveName[2] := '\';
      DriveName[3] := 0;
      
      // get driveletter & drive extension
      SigCLib.StrCpy(dst0:=#tmpFullPath[0], src0:=#DriveName[0]);
      
      tmpLength := FilePathName.GetLength();
      FilePathName.GetDataAt(pData:=#tmpDrivePath[0], udSize:=tmpLength, udAt:=0);
      SigCLib.StrCat(ps1:=#tmpFullPath[0], ps2:=#tmpDrivePath[0]);
      tmpFullPath[tmpLength+3] := 0;
      
      // check if there is a filename entered
      if (tmpLength > 0) then
        //set parameters because of delay for UsbInitialisation
        timestamp := ops.tAbsolute;
        IsFileRead := 0;
      end_if;
      
    end_if;
  end_for;
  
  //----- wait for Initialisation of the Usb ------------------------------------------------------
  if ((ops.tAbsolute - timestamp)  > InitTimeUSB) then
    if (IsFileRead = 0) then
      IsFileRead := 1;
      
      // does the file exist?
      ret := _FileSys.RenameFile_Dir(actname:=#tmpFullPath[0], newname:=#tmpFullPath[0]);
      
      if ((ret = 0) | (ret = -36)) then  // -36 RTF_FILE_EXISTS
        
        if (IsCon_OutResetCmd) then
        
          OutResetCmd.Write(input:=1);
          CyclesUntilReset := 2;
          
        end_if;
        
      end_if;
    end_if;
  end_if;
  
  IsFirstRun := 0;
  
	state := READY;

END_FUNCTION
