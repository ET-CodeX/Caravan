//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#RE_IN_DE
#pragma define (store)
#if _LSL_COMPILERVERSION >= 42
HwControl : CLASS;
#endif
_IPConfigIF : CLASS_PUBLIC
	TYPE
	  t_e_IF_NET_MODE :
	  (
	    IF_undef,
	    IF_InitDeviceIP,
	    IF_DeviceIP,
	    IF_SoftwareIP
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_SerLib : CLASS_PUBLIC
	TYPE
	  CmdCommand :
	  (
	    StartUserIPR,
	    StopUserIPR,
	    SerCloseIPR,
	    SerSendIPR,
	    RecvCharIPR,
	    SetOnlineIPR,
	    GetRecvStateIPR,
	    GetSendStateIPR,
	    GetErrorIPR,
	    IsInitializedIPR,
	    ClearRecBufferIPR,
	    RtsOnOffIPR,
	    rdRtsIPR,
	    rdCtsIPR,
	    DtrOnOffIPR,
	    rdDtrIPR,
	    rdDcdIPR,
	    rdDsrIPR,
	    rdRiIPR,
	    SetRSModeIPR,
	    GetRSModeIPR,
	    GetInterfaceTypeIPR
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_SIG_LSL_CMultimasterState : CLASS_PUBLIC
#include <.\LoaderItf.h>
	TYPE
	  _MMStateSvr :
	  (
	    Offline:=0,
	    Online_Initializing:=1,
	    Online:=2,
	    Online_NotAllServerAvailable:=3,
	    SvrNotFoundAtStation:=16
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
SdiasBase : CLASS_PUBLIC
#include "..\Class\SdiasManager\SdiasManager.h"
#include "..\Class\SdiasBase\SdiasBase.h"
#include "..\Class\HwControl\HwControl.h"
#include "..\Source\interfaces\lsl_st_hardwaretree.h"
#include "..\Source\interfaces\lsl_st_mt.h"
	TYPE
	  t_b_SdiasFWState : BINT
	  [
	    1 VoltageNotOk,
	    2 NoSync,
	    3 FlashDataCRCError,
	    4 RAMDataCRCError,
	    5 FlashUnsafe,
	    6 BusTimeNotSupported,
	    7 ToggleBit,
	  ];
#pragma pack(push, 1)
	  t_s_SdiasFWStateStandard : STRUCT
	    ErrorBits : t_b_SdiasFWState;
	    Reserved : UINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
AI075 : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_SamplePointState : STRUCT
	    StateBits : BDINT
	    [
	      1 SamplePointsCorrectedByFW,
	      2 SamplePointsCouldNotBeCorrected,
	      3 InvalidCycleTimeSet,
	      4 InvalidCycleTimeCompare,
	      5 Bit5,
	      6 Bit6,
	      7 Bit7,
	      8 Bit8,
	      9 Bit9,
	      10 Bit10,
	      11 Bit11,
	      12 Bit12,
	      13 Bit13,
	      14 Bit14,
	      15 Bit15,
	      16 Bit16,
	      17 Bit17,
	      18 Bit18,
	      19 Bit19,
	      20 Bit20,
	      21 Bit21,
	      22 Bit22,
	      23 Bit23,
	      24 Bit24,
	      25 Bit25,
	      26 Bit26,
	      27 Bit27,
	      28 Bit28,
	      29 Bit29,
	      30 Bit30,
	      31 Bit31,
	      32 Bit32,
	    ];
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
DataManagerFIFO : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_Header : STRUCT
	    Prio : DINT;
	    Timeout : UDINT;
	    Timestamp : UDINT;
	    JobID : DINT;
	    Valid : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Info : STRUCT
	    SourceID : DINT;
	    DestinationID : DINT;
	    pThis : ^void;
	    pCallback : ^void;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_e_Entry : STRUCT
	    Header : t_s_Header;
	    Info : t_s_Info;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Data : STRUCT
	    ptr : pVoid;
	    size : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
DataManagerPriority : CLASS_PUBLIC
	TYPE
	  t_e_CallbackState :
	  (
	    _MNG_Sending,
	    _MNG_Sended,
	    _MNG_Received,
	    _MNG_NoReceiverConnected,
	    _MNG_JobDeletet,
	    _MNG_TimeOut,
	    _MNG_GlobalReceiveError
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
GetTaskHandle : CLASS_PUBLIC
	TYPE
	  _ActTask :
	  (
	    AT_Real,
	    AT_Cyclic,
	    AT_Background,
	    AT_NoStdTask
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
LseEasy : CLASS_PUBLIC
#include "..\Source\Common\hmi_nuc.h"
	TYPE
	  TErrorSvr :
	  (
	    ErrNone,
	    ErrCreateHmiProject,
	    ErrLseCompilerVersion,
	    ErrLoadLseProject,
	    ErrSizeLseProject,
	    ErrUploadHmiProject,
	    ErrHmiCommunication
	  )$UDINT;
	  TStateSvr :
	  (
	    TStart,
	    TUpLoad,
	    TRun,
	    TError,
	    TFirmwareUpdate,
	    TSleep,
	    TChkCrc,
	    TGetScreenShot,
	    TReboot,
	    TBootLoaderUpdate,
	    TCheckUpdateBootloader,
	    TCheckUpdateFirmware
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MerkerEx : CLASS_PUBLIC
#include <.\lsl_st_mt.h>
	TYPE
	  Cmdm_udLength :
	  (
	    GET_DATA_PTR,
	    EXCHANGE_DATA_PTR,
	    SAVE_DATA_TO_RAMEXFILE
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
NetworkConfig : CLASS_PUBLIC
	TYPE
	  e_GetOptions :
	  (
	    GET_IDLE,
	    GET_AUTOEXEC,
	    GET_OS
	  )$UDINT;
	  e_SetOptions :
	  (
	    SET_IDLE,
	    SET_AUTOEXEC,
	    SET_OS,
	    SET_BOTH
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
RamRingBuffer : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  SRR_HEAD : STRUCT
	    No : UDINT;
	    Begin : UDINT;
	    Pos : UDINT;
	    Used : UDINT;
	    RecSize : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyCDIAS_Base : CLASS_PUBLIC
#include "..\Class\SafetyCDIAS_Base\SafetyCDIAS_Base.h"
#include "..\Source\interfaces\lsl_st_safety.h"
#include "..\Class\SafetyManager\SafetyManager.h"
	TYPE
	  FrameTypeType : BSINT
	  [
	    1 Cfg,
	    2 ToP,
	    3 Standard,
	    4 PDO,
	    5 TDO,
	    6 Reserved1,
	    7 Reserved2,
	    8 Response,
	  ];
#pragma pack(push, 1)
	  SDOStdHeader : STRUCT
	    CRC : UDINT;
	    Cmd : USINT;
	    Typ : FrameTypeType;
	    SeqNr : USINT;
	    Len : USINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  SDOHeader : STRUCT
	    StdHeader : SDOStdHeader;
	    SrcAdr : HDINT;
	    DstAdr : HDINT;
	    SessId : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyUDP : CLASS_PUBLIC
	TYPE
	  _FSM_UDP_ERROR :
	  (
	    _NO_ERROR_UDP_ERROR:=0,
	    _INIT_TCP_USER_UDP_ERROR:=4294967295,
	    _NO_IP_ADDRESS_UDP_ERROR:=4294967294,
	    _NO_MEMORY_SOCKET_UDP_ERROR:=4294967293,
	    _NO_MEMORY_SENDBUFFER_UDP_ERROR:=4294967292,
	    _INVALID_HANDLE_UDP_ERROR:=4294967291,
	    _SHUTDOWN_UDP_ERROR:=4294967290,
	    _CLOSESOCKET_UDP_ERROR:=4294967289,
	    _ALLOCATE_SOCKET_UDP_ERROR:=4294967288,
	    _SET_BIND_UDP_ERROR:=4294967287,
	    _RECV_UDP_ERROR:=4294967286,
	    _SEND_UDP_ERROR:=4294967285,
	    _NO_LOCAL_IP_UDP_ERROR:=4294967284,
	    _NO_DESTINATION_IP_UDP_ERROR:=4294967283,
	    _INVALID_UDP_PORT_UDP_ERROR,
	    _INVALID_INTERFACE_NUMBER_UDP_ERROR,
	    _NO_MEMORY_RECEIVE_BUFFER_UDP_ERROR,
	    _NO_MEMORY_CONNECTION_BUFFER_UDP_ERROR
	  )$DINT;
	  _FSM_UDP_USER :
	  (
	    _STATE_INIT_UDP,
	    _STATE_IDLE_UDP,
	    _STATE_SOCK_UDP,
	    _STATE_CONNECT_UDP,
	    _STATE_ONLY_SEND_UDP,
	    _STATE_RECV_UDP,
	    _STATE_SEND_UDP,
	    _STATE_SHUTDOWN_UDP,
	    _STATE_CLOSE_SOCK_UDP,
	    _STATE_ERROR_UDP
	  )$UDINT;
	  _INITSTEPS :
	  (
	    _NO_OPERATION,
	    _ADD_SOCKET,
	    _CHECK_IF_SOCKET_OPEN,
	    _BIND_SOCKET,
	    _CLOSE_CON
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
SR020 : CLASS_PUBLIC
	TYPE
	  t_SR_Error_State : BINT
	  [
	    1 bSequenceDisabled,
	    2 bWrongSequence,
	    3 bAbsoluteTimeError,
	    4 bMotorCurrentHigh,
	    5 bMotorCurrentTooHigh,
	    6 bExternDCNotOK,
	    7 bMotorDCNotOK,
	    8 bPeripheryResetLED,
	    9 bPeripheryResetMotor,
	    10 bInductionVoltageTooHigh,
	    11 bOverTemperatureError,
	    13 bI2TError,
	  ];
#pragma pack(push, 1)
	  t_SDIAS_Fw_State_SR : STRUCT
	    StandardState : SdiasBase::t_b_SdiasFWState;
	    SRState : t_SR_Error_State;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
TCPCommunication : CLASS_PUBLIC
#include "..\Class\TCPCommunication\TCPCommunication.h"
#include "..\Class\TCPCommunication\SalamanderDelay.h"
	TYPE
	  t_e_ConnectionType :
	  (
	    NotValid,
	    TCPClient,
	    TCPServer,
	    InternConnection
	  )$UDINT;
	  t_e_PackageCmd :
	  (
	    PCMD_Alive,
	    PCMD_Data,
	    PCMD_Acknowledge,
	    PCMD_ConnectionOK,
	    PCMD_ConnectionClosed,
	    PCMD_ConnectionTimeOut,
	    PCMD_TryToConnect,
	    PCMD_ComDeactivated,
	    PCMD_ComActivated
	  )$UDINT;
#pragma pack(push, 1)
	  t_s_Header : STRUCT
	    Commando : t_e_PackageCmd;
	    DestinationID : DINT;
	    SourceID : DINT;
	    JobID : DINT;
	    pThisSource : pVoid;
	    pCallBackSource : pVoid;
	    PackageSize : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_LogEntry : STRUCT
	    Header : t_s_Header;
	    Prio : DINT;
	    TimeStamp : UDINT;
	    TimeOut : UDINT;
	    TCPType : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
VirtualBaseInit : CLASS_PUBLIC
	TYPE
	  CmdData :
	  (
	    GET_ADD_INFO,
	    READ_DATA,
	    WRITE_DATA,
	    READ_DATA_OFF,
	    WRITE_DATA_OFF
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)

#RE_IN_DE
