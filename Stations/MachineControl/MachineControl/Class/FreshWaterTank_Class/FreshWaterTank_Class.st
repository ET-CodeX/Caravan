//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "FreshWaterTank_Class"
	Revision           = "0.0"
	GUID               = "{E261BC0C-8D1C-4763-97F9-20C98011666C}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	DefBackground      = "1000 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(420,420)">
	<Channels>
		<Server Name="Check_S" GUID="{B454A9FA-767E-4F6D-8472-3DE3CC5B82BE}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{4035AB7A-DB73-45B2-AADE-1610A7231C46}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Level_S" GUID="{7CF5D684-379B-4516-A8EC-E356ACBDA18D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Start_Check" Required="true" Internal="false"/>
		<Client Name="Water_100" Required="true" Internal="false"/>
		<Client Name="Water_25" Required="true" Internal="false"/>
		<Client Name="Water_50" Required="true" Internal="false"/>
		<Client Name="Water_75" Required="true" Internal="false"/>
		<Client Name="WaterPump" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
FreshWaterTank_Class : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Check_S 	: SvrCh_DINT;
	Level_S 	: SvrCh_DINT;
  //Clients:
	Start_Check 	: CltCh_DINT;
	Water_25 	: CltCh_DINT;
	Water_50 	: CltCh_DINT;
	Water_75 	: CltCh_DINT;
	Water_100 	: CltCh_DINT;
	WaterPump 	: CltCh_DINT;
  //Variables:
		PumpMerker 	: DINT;
		TimeMerker 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB FreshWaterTank_Class::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_FRESHWATERTANK_CLASS
0$UINT, 0$UINT, (SIZEOF(::FreshWaterTank_Class))$UINT, 
3$UINT, 6$UINT, 0$UINT, 
TO_UDINT(612432597), "FreshWaterTank_Class", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::FreshWaterTank_Class.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::FreshWaterTank_Class.Check_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2713205637), "Check_S", 
(::FreshWaterTank_Class.Level_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3960143033), "Level_S", 
//Clients:
(::FreshWaterTank_Class.Start_Check.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3279167804), "Start_Check", 
(::FreshWaterTank_Class.Water_25.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1654061141), "Water_25", 
(::FreshWaterTank_Class.Water_50.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1572706845), "Water_50", 
(::FreshWaterTank_Class.Water_75.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(534842384), "Water_75", 
(::FreshWaterTank_Class.Water_100.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2424940222), "Water_100", 
(::FreshWaterTank_Class.WaterPump.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1343730679), "WaterPump", 
END_FUNCTION


#define USER_CNT_FreshWaterTank_Class 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_FreshWaterTank_Class] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION FreshWaterTank_Class::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_FreshWaterTank_Class, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Check_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Check_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Level_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Level_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL FreshWaterTank_Class::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

    //Einlesen
    
    Check_S :=  Check_S.Read();
    
    Start_Check   :=   Start_Check.Read();
    
    WaterPump     :=    WaterPump.Read();
       
    Water_25   :=    Water_25.Read();
    
    Water_50   :=    Water_50.Read();
    
    Water_75   :=    Water_75.Read();
    
    Water_100   :=    Water_100.Read();
    

    
    
    
   
   //Check durchführen
    
    if Check_S  = 1  then
    
      Start_Check :=  Start_Check.Write(input:=1);
      
      TimeMerker  :=  ops.tAbsolute;
           
      Check_S   :=  Check_S.Write(input:=0);
      
      Level_S   :=    Level_S.Write(input:=999);
      
    end_if;
    
  
  
  if Start_Check  = 1 & (ops.tAbsolute >=  (TimeMerker + 3000)) then
  
     
    
       if  Water_25 = 1  & Water_50 = 1  & Water_75 = 1 & Water_100 = 1 then
      
            Level_S := Level_S.Write(input:=100);
            
       end_if;
       
    
        
       if  Water_25 = 1  & Water_50 = 1  & Water_75 = 1 & Water_100 = 0 then
         
           Level_S  :=  Level_S.Write(input:=75);
           
       end_if;
       
       
               
        if  Water_25 = 1  & Water_50 = 1  & Water_75 = 0  & Water_100 = 0  then
          
            Level_S :=  Level_S.Write(input:=50);
            
        end_if;
        
               
               
        if  Water_25 = 1  & Water_50 = 0  & Water_75 = 0 & Water_100 = 0 then
          
               Level_S.Write(input:=25);
               
        end_if;
        
        
        if  Water_25 = 0  & Water_50 = 0  & Water_75 = 0 & Water_100 = 0 then
          
               Level_S.Write(input:=0);
               
        end_if;        
        
  
                               
      Start_Check :=  Start_Check.Write(input:=0);;
      TimeMerker    :=  0;

      
    end_if;
    
    
    //Wasserpumpe erfassen
   
   if WaterPump  =  1 & PumpMerker = 0 then
    
        PumpMerker  :=  1;
    
    end_if;
    
    
    //Beim Ausschalten der Pumpe Messung ausführen    
    
  if WaterPump  = 0  &  PumpMerker  = 1 then
  
      PumpMerker    :=  0;
      
      Check_S     :=  Check_S.Write(input:=1);  
      
  end_if;

    

    
    
    






	state := READY;

END_FUNCTION
