//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Level_Class"
	Revision           = "0.0"
	GUID               = "{725AF68B-FB11-4A48-B867-1EA622AD29C9}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(570,240)">
	<Channels>
		<Server Name="ClassSvr" GUID="{FDE4E8AE-2920-4C12-99BD-F2D4AE48589B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Level_X_S" GUID="{294930F6-9DCE-4926-A233-D1476BC88B3D}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Level_Y_S" GUID="{A9EBEE01-DB03-4E84-8485-59931EF4BB64}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="SetZero_S" GUID="{B16E1D17-52F9-440C-9340-0D3BAD2C471E}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ZeroPositionX_S" GUID="{A1D2ACAE-54DE-45DF-A6BF-95DB393CBA51}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="ZeroPositionY_S" GUID="{3EA1B879-52AC-4BF4-AAB1-5D80A5F2821E}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Client Name="PositionInput_X_C" Required="true" Internal="false"/>
		<Client Name="PositionInput_Y_C" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
Level_Class : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Level_X_S 	: SvrCh_DINT;
	Level_Y_S 	: SvrCh_DINT;
	ZeroPositionX_S 	: SvrCh_DINT;
	ZeroPositionY_S 	: SvrCh_DINT;
	SetZero_S 	: SvrCh_DINT;
  //Clients:
	PositionInput_X_C 	: CltCh_DINT;
	PositionInput_Y_C 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Level_Class::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_LEVEL_CLASS
0$UINT, 0$UINT, (SIZEOF(::Level_Class))$UINT, 
6$UINT, 2$UINT, 0$UINT, 
TO_UDINT(222137160), "Level_Class", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Level_Class.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Level_Class.Level_X_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(63044359), "Level_X_S", 
(::Level_Class.Level_Y_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(33788208), "Level_Y_S", 
(::Level_Class.ZeroPositionX_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1228391635), "ZeroPositionX_S", 
(::Level_Class.ZeroPositionY_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1224060644), "ZeroPositionY_S", 
(::Level_Class.SetZero_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4088715417), "SetZero_S", 
//Clients:
(::Level_Class.PositionInput_X_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(759782788), "PositionInput_X_C", 
(::Level_Class.PositionInput_Y_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(747321267), "PositionInput_Y_C", 
END_FUNCTION


#define USER_CNT_Level_Class 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Level_Class] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Level_Class::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Level_Class, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Level_X_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Level_X_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Level_Y_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Level_Y_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ZeroPositionX_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ZeroPositionX_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ZeroPositionY_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ZeroPositionY_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetZero_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetZero_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Level_Class::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

    //Einlesen
    PositionInput_X_C   :=      PositionInput_X_C.Read();
    PositionInput_Y_C   :=      PositionInput_Y_C.Read();
      
    
    //Nullpunkt definieren
    if SetZero_S  = 1 then
    
      ZeroPositionX_S :=  ZeroPositionX_S.Write(input:=PositionInput_X_C);
      ZeroPositionY_S :=  ZeroPositionY_S.Write(input:=PositionInput_Y_C);
    
    end_if;


    //Lage für X Achse ausgeben    
    Level_X_S   :=    (PositionInput_X_C - ZeroPositionX_S + 310) ;
      
    //Nicht übersteuern, im Bildausschnitt bleiben  
    IF Level_X_S  > 619  THEN
    
       Level_X_S   :=    Level_X_S.Write(input:=619);
       
    ELSIF    Level_X_S  < 1 THEN
    
        Level_X_S   :=    Level_X_S.Write(input:=1);
    
    ELSE
    
        Level_X_S   :=    Level_X_S.Write(input:=Level_X_S);
    
    END_IF;

    //Lage für die Y Achse ausgeben
    Level_Y_S   :=    PositionInput_Y_C - ZeroPositionY_S +165;
    
    
    
    //Nicht übersteuern, im Bildausschnitt bleiben 
    IF Level_Y_S > 329 THEN
    
      Level_Y_S   :=  Level_Y_S.Write(input:=329);
      
    ELSIF   Level_Y_S < 1 Then
    
             Level_Y_S  :=  Level_Y_S.Write(input:=1);
    
    ELSE
    
      Level_Y_S   :=    Level_Y_S.Write(input:=Level_Y_S);
    
    END_IF;

    
    
    








	state := READY;

END_FUNCTION
