//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Grid_Class"
	Revision           = "0.0"
	GUID               = "{CB6C28BA-C726-49C7-BCA1-2AE17C43AF98}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(720,480)">
	<Channels>
		<Server Name="ActualAmps_S" GUID="{559D8385-F781-4C63-AFF9-227BF14C355B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ActualPower_S" GUID="{AC2C8088-7E30-47EB-8ACA-F99ACCAE8121}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{1C385936-B2EC-4EAA-9A3A-D2A84CBECE32}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Inverter_S" GUID="{2760D371-9D56-45E5-8069-156D35C7501D}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="InverterTimer_S" GUID="{2E584F22-EDE6-4F77-B0FF-F0165FDDC3E6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="MaxSensorAmps_S" GUID="{759AF147-ED76-43CA-89B9-0FCC570CC5EB}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="Netzspannung" GUID="{204B6E6C-5746-4691-B2A4-0105A3BB8164}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="ResetKwh_S" GUID="{1BC43E4F-EDB9-4E18-A420-C83CA1C7F9C3}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="TurnOffTimer" GUID="{6D964D89-5E08-4E88-BD39-92895E203229}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Wattsec_Used_S" GUID="{D15F7C40-DEAC-4B37-8F25-EF49A3B469A7}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Client Name="ActualAmps_C" Required="true" Internal="false"/>
		<Client Name="Inverter_C" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
Grid_Class : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ActualAmps_S 	: SvrCh_DINT;
	ActualPower_S 	: SvrCh_DINT;
	MaxSensorAmps_S 	: SvrCh_DINT;
	ResetKwh_S 	: SvrCh_DINT;
	Wattsec_Used_S 	: SvrCh_DINT;
	Netzspannung 	: SvrCh_DINT;
	Inverter_S 	: SvrCh_DINT;
	InverterTimer_S 	: SvrCh_UDINT;
	TurnOffTimer 	: SvrCh_UDINT;
  //Clients:
	ActualAmps_C 	: CltCh_DINT;
	Inverter_C 	: CltCh_DINT;
  //Variables:
		SectionCounter_VAR 	: DINT;
		SectionPower_VAR 	: DINT;
		OPS_VAR 	: UDINT;
		WattsecAdding_Var 	: DINT;
		PrepValue_VAR 	: DINT;
		Einschaltmerker 	: DINT;
		InverterONMerker 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Grid_Class::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_GRID_CLASS
0$UINT, 0$UINT, (SIZEOF(::Grid_Class))$UINT, 
10$UINT, 2$UINT, 0$UINT, 
TO_UDINT(1681589219), "Grid_Class", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Grid_Class.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Grid_Class.ActualAmps_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2144216772), "ActualAmps_S", 
(::Grid_Class.ActualPower_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1397233969), "ActualPower_S", 
(::Grid_Class.MaxSensorAmps_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(57228428), "MaxSensorAmps_S", 
(::Grid_Class.ResetKwh_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1490706367), "ResetKwh_S", 
(::Grid_Class.Wattsec_Used_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2268944555), "Wattsec_Used_S", 
(::Grid_Class.Netzspannung.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(509521256), "Netzspannung", 
(::Grid_Class.Inverter_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2456416229), "Inverter_S", 
(::Grid_Class.InverterTimer_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2699103248), "InverterTimer_S", 
(::Grid_Class.TurnOffTimer.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3006384734), "TurnOffTimer", 
//Clients:
(::Grid_Class.ActualAmps_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1652111008), "ActualAmps_C", 
(::Grid_Class.Inverter_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2413756289), "Inverter_C", 
END_FUNCTION


#define USER_CNT_Grid_Class 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Grid_Class] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Grid_Class::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Grid_Class, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActualAmps_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ActualAmps_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActualPower_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ActualPower_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxSensorAmps_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxSensorAmps_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ResetKwh_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ResetKwh_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Wattsec_Used_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Wattsec_Used_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Netzspannung.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Netzspannung.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Inverter_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Inverter_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InverterTimer_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF InverterTimer_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TurnOffTimer.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF TurnOffTimer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Grid_Class::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
      ActualAmps_C  :=  ActualAmps_C.Read();
      MaxSensorAmps_S :=  MaxSensorAmps_S.Read();
      ResetKwh_S  :=  ResetKwh_S.Read();
      Inverter_C  :=  Inverter_C.Read();

      
      
      
       //Keine Division durch 0
       if MaxSensorAmps_S = 0 then
       
            MaxSensorAmps_S.Write(input:=1);
            
       end_if;

       
      
       //Rechnen nur wenn der Sensor auch etwas richtiges sieht
       if ActualAmps_C > 50 then
         
         
         //Aktueller Strom errechnen
         ActualAmps_S  :=  ActualAmps_S.Write(input:=(ActualAmps_C*1000) / (10000/MaxSensorAmps_S));
         
         
         //Aktuelle Watt berechnen
         ActualPower_S :=  ActualPower_S.Write(input:=(Netzspannung*ActualAmps_S/1000));
         
       else
       
          ActualAmps_S  :=  ActualAmps_S.Write(input:=0);
          
          ActualPower_S :=  ActualPower_S.Write(input:=0);
       
       end_if;

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        // Stromzähler addieren
        SectionCounter_VAR += 1;
        SectionPower_VAR  +=  ActualPower_S;
        
        if ops.tAbsolute  >= OPS_VAR + 1000 then
                
           WattsecAdding_Var  :=  (SectionPower_VAR / SectionCounter_VAR);
           
           PrepValue_VAR    :=    (WattsecAdding_Var/10) + Wattsec_Used_S;
           
           Wattsec_Used_S.Write(input:=PrepValue_VAR);
           
           
           
           SectionCounter_VAR :=  0;
           
           SectionPower_VAR   :=  0;
           
           OPS_VAR  :=  ops.tAbsolute;
           
           
           
        
        end_if;

        
        
      
      
      
        //Reset KWh        
        if ResetKwh_S = 1 then
        
          Wattsec_Used_S  :=  Wattsec_Used_S.Write(input:=0);
        
        end_if;

        
        //Inverter ein/ausschalten
        Inverter_C  :=  inverter_C.Write(input:=Inverter_S);
        
        
        
        if ActualAmps_C > 100 & Inverter_C  = 1 then
        
            Inverter_S  :=  Inverter_S.Write(input:=0);
            Inverter_c  :=  Inverter_C.Write(input:=0);
            InverterONMerker  :=  0;
        
        end_if;
        
        
        if InverterTimer_S  > 0 & InverterONMerker = 0 & Inverter_S = 1 then
        
            InverterONMerker  :=  ops.tAbsolute;
            
          elsif InverterTimer_S  > 0 & InverterONMerker > 0 & Inverter_S = 0 then
          
                   Inverter_S  :=  Inverter_S.Write(input:=0);
                   Inverter_c  :=  Inverter_C.Write(input:=0);
                   InverterONMerker  :=  0;
        
        end_if;
        
        
        if ops.tAbsolute - InverterONMerker > InverterTimer_S  & InverterTimer_S > 0 then
              Inverter_S  :=  Inverter_S.Write(input:=0);
              Inverter_c  :=  Inverter_C.Write(input:=0);
              InverterONMerker  :=  0;   
        end_if;
        
        if Inverter_C = 1 & InverterTimer_S > 0 then
        
            TurnOffTimer  :=  TurnOffTimer.Write(input:= InverterTimer_S - (ops.tAbsolute - InverterONMerker));
            
          else
          
            TurnOffTimer  :=  InverterTimer_S;
        
        end_if;


        
        


      
      
      
  
  
  
  

	state := READY;

END_FUNCTION
