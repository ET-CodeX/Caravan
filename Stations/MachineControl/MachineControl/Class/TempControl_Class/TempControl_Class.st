//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TempControl_Class"
	Revision           = "0.0"
	GUID               = "{3C06D0B3-B30A-4716-B5AC-3B0842FF9685}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(960,300)">
	<Channels>
		<Server Name="Actual_TempHZS_S" GUID="{73D0AB3A-F762-4AA8-BA12-0BEB0832B429}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Actual_UltraheatTemp_S" GUID="{4EF7D946-A58D-4453-AD62-F1B981A294AD}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ActualRoomTemp_S" GUID="{93306F5E-595F-4338-AFE9-B13008758959}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{26A54483-46E9-4CA7-982E-E9748E439593}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="FanMode_S" GUID="{231D45E2-2206-426F-B2F3-FE0A11554C25}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="FanSpeed_S" GUID="{7A535104-7015-473D-89BE-37E7BA4F0403}" Visualized="true" Initialize="true" DefValue="5" WriteProtected="false" Retentive="File"/>
		<Server Name="HeaterOn_S" GUID="{D8C7D0BD-C531-47E1-8DE7-B29BE9C1A12E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="SetRoomTemp_S" GUID="{0520698F-8A88-4F4A-A2EF-1F3028524E22}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="SetTempHZS_s" GUID="{87F9CB0C-0A64-4F99-B87E-D01A1887139D}" Visualized="true" Initialize="true" DefValue="200" WriteProtected="false" Retentive="File"/>
		<Client Name="ActualRoomTemp_C" Required="true" Internal="false"/>
		<Client Name="ActualUltraheatTemp_C" Required="true" Internal="false"/>
		<Client Name="Heater200Watt_C" Required="true" Internal="false"/>
		<Client Name="HeaterOn_C" Required="true" Internal="false" DefValue="0"/>
		<Client Name="HeaterRun_C" Required="true" Internal="false" DefValue="0"/>
		<Client Name="MotorRunStop_C" Required="true" Internal="false"/>
		<Client Name="SetFanSpeed_C" Required="true" Internal="false"/>
		<Client Name="TempHZS_C" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
TempControl_Class : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Actual_TempHZS_S 	: SvrCh_DINT;
	ActualRoomTemp_S 	: SvrCh_DINT;
	Actual_UltraheatTemp_S 	: SvrCh_DINT;
	SetTempHZS_s 	: SvrCh_DINT;
	SetRoomTemp_S 	: SvrCh_DINT;
	HeaterOn_S 	: SvrCh_DINT;
	FanMode_S 	: SvrCh_DINT;
	FanSpeed_S 	: SvrCh_DINT;
  //Clients:
	TempHZS_C 	: CltCh_DINT;
	ActualRoomTemp_C 	: CltCh_DINT;
	ActualUltraheatTemp_C 	: CltCh_DINT;
	SetFanSpeed_C 	: CltCh_DINT;
	MotorRunStop_C 	: CltCh_DINT;
	HeaterRun_C 	: CltCh_DINT;
	HeaterOn_C 	: CltCh_DINT;
	Heater200Watt_C 	: CltCh_DINT;
  //Variables:
		NeedHeatRoom_VAR 	: DINT;
		NeedHeatHZS_VAR 	: DINT;
		UltraheatFanTemp_VAR 	: DINT;
		MotorSpeedCalculated_VAR 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TempControl_Class::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TEMPCONTROL_CLASS
0$UINT, 0$UINT, (SIZEOF(::TempControl_Class))$UINT, 
9$UINT, 8$UINT, 0$UINT, 
TO_UDINT(3440325224), "TempControl_Class", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TempControl_Class.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::TempControl_Class.Actual_TempHZS_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2830876003), "Actual_TempHZS_S", 
(::TempControl_Class.ActualRoomTemp_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1318691183), "ActualRoomTemp_S", 
(::TempControl_Class.Actual_UltraheatTemp_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3829201109), "Actual_UltraheatTemp_S", 
(::TempControl_Class.SetTempHZS_s.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(768159939), "SetTempHZS_s", 
(::TempControl_Class.SetRoomTemp_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2142723965), "SetRoomTemp_S", 
(::TempControl_Class.HeaterOn_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2738604221), "HeaterOn_S", 
(::TempControl_Class.FanMode_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2122429898), "FanMode_S", 
(::TempControl_Class.FanSpeed_S.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(526923816), "FanSpeed_S", 
//Clients:
(::TempControl_Class.TempHZS_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4054313221), "TempHZS_C", 
(::TempControl_Class.ActualRoomTemp_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1395568907), "ActualRoomTemp_C", 
(::TempControl_Class.ActualUltraheatTemp_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(121566510), "ActualUltraheatTemp_C", 
(::TempControl_Class.SetFanSpeed_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(986067777), "SetFanSpeed_C", 
(::TempControl_Class.MotorRunStop_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(365682322), "MotorRunStop_C", 
(::TempControl_Class.HeaterRun_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(647827128), "HeaterRun_C", 
(::TempControl_Class.HeaterOn_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3196901593), "HeaterOn_C", 
(::TempControl_Class.Heater200Watt_C.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4135518177), "Heater200Watt_C", 
END_FUNCTION


#define USER_CNT_TempControl_Class 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TempControl_Class] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TempControl_Class::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TempControl_Class, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Actual_TempHZS_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Actual_TempHZS_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActualRoomTemp_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ActualRoomTemp_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Actual_UltraheatTemp_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Actual_UltraheatTemp_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetTempHZS_s.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetTempHZS_s.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetRoomTemp_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetRoomTemp_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	HeaterOn_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF HeaterOn_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FanMode_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF FanMode_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	FanSpeed_S.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF FanSpeed_S.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL TempControl_Class::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

    //Variablen einlesen
    TempHZS_C   :=    TempHZS_C.Read();
    
    ActualRoomTemp_C  :=  ActualRoomTemp_C.Read();
    
    ActualUltraheatTemp_C :=  ActualUltraheatTemp_C.Read();
    
    SetFanSpeed_C :=  SetFanSpeed_C.Read();
    
    MotorRunStop_C  :=  MotorRunStop_C.Read();
    
    HeaterRun_C :=  HeaterRun_C.Read();
    
    
    //Heizung Einschalten
    if HeaterOn_S > 0 then
    
      HeaterOn_C  :=  HeaterOn_C.Write(input:=1);
      
        else
        
          HeaterOn_C  :=  HeaterOn_C.Write(input:=0);
    
    end_if;


    //Heizleistung einstellen
    if HeaterOn_S = 2 then
    
         Heater200Watt_C  :=  Heater200Watt_C.Write(input:=1);  
     
       else
        
         Heater200Watt_C  :=  Heater200Watt_C.Write(input:=0);
    
    end_if;

    
    
    //Temperatur steuern Raum
    if ActualRoomTemp_C < (SetRoomTemp_S - 1) & HeaterOn_S  >= 1 then
    
        NeedHeatRoom_VAR :=  1;
      
      elsif ActualRoomTemp_C > SetRoomTemp_S | HeaterOn_S = 0 then
        
        NeedHeatRoom_VAR :=  0;
           
    end_if;
    
    
    //Temperatur steuern Schlafzimmer
    if (TempHZS_C < (SetTempHZS_s - 1)) & (HeaterOn_S  >= 1) then
    
        NeedHeatHZS_VAR :=  1;
      
      elsif TempHZS_C  >  SetTempHZS_s | HeaterOn_S = 0 then
        
        NeedHeatHZS_VAR :=  0;
           
    end_if;    


    //heizung ansteuern
    if NeedHeatHZS_VAR  = 1 | NeedHeatRoom_VAR = 1 then
    
          HeaterRun_C :=  HeaterRun_C.Write(input:=1);
          
        else
        
          HeaterRun_C :=  HeaterRun_C.Write(input:=0);
    
    end_if;


    //Ventilator auf Manuell
    if FanMode_S  = 1 then
    
        SetFanSpeed_C   :=  SetFanSpeed_C.Write(input:=(10000/8*FanSpeed_S));
    
        MotorRunStop_C  :=  MotorRunStop_C.Write(input:=1);
        
    
    end_if;
    
    
    //Ventilator auf Auto
    
      if FanMode_S  = 2 then
        
          UltraheatFanTemp_VAR    :=    (ActualUltraheatTemp_C - ActualRoomTemp_C);
          
          MotorSpeedCalculated_VAR  :=  (10000/500*UltraheatFanTemp_VAR);
          
            if MotorSpeedCalculated_VAR > (10000/8*FanSpeed_S) then
            
                SetFanSpeed_C   :=  SetFanSpeed_C.Write(input:=(10000/8*FanSpeed_S));
                
              elsif MotorSpeedCalculated_VAR  >=  0 then
              
                SetFanSpeed_C   :=   SetFanSpeed_C.Write(input:=MotorSpeedCalculated_VAR);
                
              else
              
                SetFanSpeed_C   :=   SetFanSpeed_C.Write(input:=0); 
                
            
            end_if;
    
        MotorRunStop_C  :=  MotorRunStop_C.Write(input:=1);
        
    
     end_if;
    
    
    
    //Ventilator ausschalten
    if FanMode_S  = 0 then
    
        MotorRunStop_C    :=    MotorRunStop_C.Write(input:=0);
    
    end_if;
    
    
    



















     //Variablen Schreiben
     Actual_TempHZS_S   :=    Actual_TempHZS_S.Write(input:=TempHZS_C);
     ActualRoomTemp_S   :=    ActualRoomTemp_S.Write(input:=ActualRoomTemp_C);


	state := READY;

END_FUNCTION
